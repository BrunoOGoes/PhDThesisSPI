(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1036395,      19615]
NotebookOptionsPosition[   1023628,      19401]
NotebookOutlinePosition[   1024103,      19419]
CellTagsIndexPosition[   1024060,      19416]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Hilbert space", "Section",
 CellChangeTimes->{{3.8955661296131287`*^9, 
  3.895566141401825*^9}},ExpressionUUID->"96664244-946d-41b2-bbfd-\
22577d48b967"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "4", "LS", " ", "dimension", " ", "and", " ", "basis", " ", "vectors"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dim4LS", " ", "=", " ", "4"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "trionUp", ",", " ", "trionDw", ",", " ", "spinUp", ",", "spinDw"}], 
      "}"}], " ", "=", 
     RowBox[{"Table", "[", " ", 
      RowBox[{
       RowBox[{"Basis", "[", 
        RowBox[{"dim4LS", ",", "i"}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "4"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Defines", " ", "a", " ", 
     StyleBox["single",
      FontWeight->"Bold"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     StyleBox["Fock",
      FontWeight->"Bold"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     StyleBox["space",
      FontWeight->"Bold"]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dimFock", " ", "=", "4"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"80", ";", " ", 
     RowBox[{"This", " ", "works", " ", "for", " ", "10", " ", "photons"}]}], 
    "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"totaldimension", " ", "=", " ", 
     RowBox[{
      SuperscriptBox["dimFock", "2"], "dim4LS"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"numberState", "[", "n_", "]"}], ":=", 
     RowBox[{"Basis", "[", 
      RowBox[{"dimFock", ",", 
       RowBox[{"n", "+", "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"LoadBosonicOperators", "[", "dimFock", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[ScriptCapitalI]Fock", "=", 
     RowBox[{"Eye", "[", "dimFock", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Polarization", " ", "dipole", " ", "vectors"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[CapitalSigma]R", " ", "=", " ", 
     RowBox[{
      RowBox[{"out", "[", 
       RowBox[{"spinUp", ",", "trionUp"}], "]"}], "//", "mf"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[CapitalSigma]L", " ", "=", " ", 
     RowBox[{
      RowBox[{"out", "[", 
       RowBox[{"spinDw", ",", "trionDw"}], "]"}], "//", "mf"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[CapitalSigma]H", " ", "=", " ", 
     FractionBox[
      RowBox[{"\[CapitalSigma]R", " ", "+", " ", "\[CapitalSigma]L"}], 
      SqrtBox["2"]]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[CapitalSigma]V", "=", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"\[ImaginaryI]", " ", 
        FractionBox["\[Pi]", "2"]}]], 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"\[CapitalSigma]R", " ", "-", " ", "\[CapitalSigma]L"}], 
        SqrtBox["2"]], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[CapitalSigma]A", "=", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "\[ImaginaryI]"}], " ", 
        FractionBox["\[Pi]", "4"]}]], 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"\[CapitalSigma]R", " ", "-", " ", 
         RowBox[{"\[ImaginaryI]", " ", "\[CapitalSigma]L"}]}], 
        SqrtBox["2"]], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[CapitalSigma]D", "=", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"\[ImaginaryI]", " ", 
        FractionBox["\[Pi]", "4"]}]], 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"\[CapitalSigma]R", " ", "+", " ", 
         RowBox[{"\[ImaginaryI]", " ", "\[CapitalSigma]L"}]}], 
        SqrtBox["2"]], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Total", " ", "polarization", " ", "dipole", " ", "vectors"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Sigma]R", "=", 
     RowBox[{"kron", "[", 
      RowBox[{
      "\[CapitalSigma]R", ",", "\[ScriptCapitalI]Fock", ",", 
       "\[ScriptCapitalI]Fock"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Sigma]L", "=", 
     RowBox[{"kron", "[", 
      RowBox[{
      "\[CapitalSigma]L", ",", "\[ScriptCapitalI]Fock", ",", 
       "\[ScriptCapitalI]Fock"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Sigma]H", " ", "=", 
     RowBox[{"kron", "[", 
      RowBox[{
      "\[CapitalSigma]L", ",", "\[ScriptCapitalI]Fock", ",", 
       "\[ScriptCapitalI]Fock"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Sigma]V", " ", "=", 
     RowBox[{"kron", "[", 
      RowBox[{
      "\[CapitalSigma]L", ",", "\[ScriptCapitalI]Fock", ",", 
       "\[ScriptCapitalI]Fock"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Sigma]A", " ", "=", 
     RowBox[{"kron", "[", 
      RowBox[{
      "\[CapitalSigma]L", ",", "\[ScriptCapitalI]Fock", ",", 
       "\[ScriptCapitalI]Fock"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Sigma]D", " ", "=", 
     RowBox[{"kron", "[", 
      RowBox[{
      "\[CapitalSigma]L", ",", "\[ScriptCapitalI]Fock", ",", 
       "\[ScriptCapitalI]Fock"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Defining", " ", "virtual", " ", "cavity", " ", "right", " ", "and", " ", 
     "Left", " ", "bosonic", " ", "operators"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckA]R", "=", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{"Eye", "[", "4", "]"}], ",", "a", ",", 
       "\[ScriptCapitalI]Fock"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckA]L", "=", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{"Eye", "[", "4", "]"}], ",", "\[ScriptCapitalI]Fock", ",", 
       "a"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckA]H", "=", 
     FractionBox[
      RowBox[{"\[DoubleStruckA]R", " ", "+", " ", "\[DoubleStruckA]L"}], 
      SqrtBox["2"]]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckA]V", "=", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"\[ImaginaryI]", " ", 
        FractionBox["\[Pi]", "2"]}]], 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"\[DoubleStruckA]R", " ", "-", " ", "\[DoubleStruckA]L"}], 
        SqrtBox["2"]], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckA]A", "=", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "\[ImaginaryI]"}], " ", 
        FractionBox["\[Pi]", "4"]}]], 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"\[DoubleStruckA]R", " ", "-", " ", 
         RowBox[{"\[ImaginaryI]", " ", "\[DoubleStruckA]L"}]}], 
        SqrtBox["2"]], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckA]D", "=", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"\[ImaginaryI]", " ", 
        FractionBox["\[Pi]", "4"]}]], 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"\[DoubleStruckA]R", " ", "+", " ", 
         RowBox[{"\[ImaginaryI]", " ", "\[DoubleStruckA]L"}]}], 
        SqrtBox["2"]], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Pauli", "-", 
     RowBox[{
     "sh", " ", "operators", " ", "in", " ", "the", " ", "spin", " ", 
      "subspace"}], " ", "-", " ", "esc", "-", "scs", "-", 
     RowBox[{"esc", "."}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[ScriptS]x", " ", "=", " ", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"out", "[", 
         RowBox[{"spinUp", ",", "spinDw"}], "]"}], "+", 
        RowBox[{"out", "[", 
         RowBox[{"spinDw", ",", "spinUp"}], "]"}]}], ",", 
       "\[ScriptCapitalI]Fock", ",", "\[ScriptCapitalI]Fock"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[ScriptS]y", " ", "=", 
     RowBox[{"kron", "[", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"\[ImaginaryI]", " ", 
          RowBox[{"out", "[", 
           RowBox[{"spinUp", ",", "spinDw"}], "]"}]}]}], "+", 
        RowBox[{"\[ImaginaryI]", " ", 
         RowBox[{"out", "[", 
          RowBox[{"spinDw", ",", "spinUp"}], "]"}]}]}], ",", 
       "\[ScriptCapitalI]Fock", ",", "\[ScriptCapitalI]Fock"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[ScriptS]z", " ", "=", " ", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"out", "[", 
         RowBox[{"spinUp", ",", "spinUp"}], "]"}], " ", "-", " ", 
        RowBox[{"out", "[", 
         RowBox[{"spinDw", ",", "spinDw"}], "]"}]}], ",", 
       "\[ScriptCapitalI]Fock", ",", "\[ScriptCapitalI]Fock"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[ScriptS]m", " ", "=", " ", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{"out", "[", 
        RowBox[{"spinDw", ",", " ", "spinUp"}], "]"}], ",", 
       "\[ScriptCapitalI]Fock", ",", "\[ScriptCapitalI]Fock"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[ScriptS]vec", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\[ScriptS]x", ",", "\[ScriptS]y", ",", "\[ScriptS]z"}], 
      "}"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Pauli", "-", 
     RowBox[{
     "sh", " ", "operators", " ", "in", " ", "the", " ", "trion", " ", 
      "subspace"}], "-", " ", "esc", "-", "dss", "-", 
     RowBox[{"esc", "."}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckS]x", " ", "=", " ", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"out", "[", 
         RowBox[{"trionUp", ",", "trionDw"}], "]"}], "+", 
        RowBox[{"out", "[", 
         RowBox[{"trionDw", ",", "trionUp"}], "]"}]}], ",", 
       "\[ScriptCapitalI]Fock", ",", "\[ScriptCapitalI]Fock"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckS]y", " ", "=", " ", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", "\[ImaginaryI]"}], " ", 
         RowBox[{"out", "[", 
          RowBox[{"trionUp", ",", "trionDw"}], "]"}]}], "+", 
        RowBox[{"\[ImaginaryI]", " ", 
         RowBox[{"out", "[", 
          RowBox[{"trionDw", ",", "trionUp"}], "]"}]}]}], ",", 
       "\[ScriptCapitalI]Fock", ",", "\[ScriptCapitalI]Fock"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckS]z", " ", "=", " ", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"out", "[", 
         RowBox[{"trionUp", ",", "trionUp"}], "]"}], " ", "-", " ", 
        RowBox[{"out", "[", 
         RowBox[{"trionDw", ",", "trionDw"}], "]"}]}], ",", 
       "\[ScriptCapitalI]Fock", ",", "\[ScriptCapitalI]Fock"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[DoubleStruckS]m", " ", "=", " ", 
     RowBox[{"kron", "[", 
      RowBox[{
       RowBox[{"out", "[", 
        RowBox[{"trionDw", ",", " ", "trionUp"}], "]"}], ",", 
       "\[ScriptCapitalI]Fock", ",", "\[ScriptCapitalI]Fock"}], "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.874650169624858*^9, 3.87465023744473*^9}, {
   3.874650347564679*^9, 3.8746503798617496`*^9}, {3.8746505140777683`*^9, 
   3.8746505632475348`*^9}, {3.874650803959804*^9, 3.8746508704903193`*^9}, {
   3.8746512028643417`*^9, 3.8746512290723667`*^9}, {3.8746512665330276`*^9, 
   3.874651269175844*^9}, {3.877678508024666*^9, 3.877678556609833*^9}, {
   3.883050770332967*^9, 3.883050771618122*^9}, 3.890190290976267*^9, {
   3.890299351169619*^9, 3.890299803235711*^9}, {3.890299945756513*^9, 
   3.890299966524147*^9}, {3.8903033804269133`*^9, 3.890303458929346*^9}, {
   3.8903035873452663`*^9, 3.890303599454899*^9}, {3.890303783047926*^9, 
   3.89030379792282*^9}, {3.8935792970586576`*^9, 3.8935793318015337`*^9}, {
   3.89505148580389*^9, 3.895051693111753*^9}, {3.8950518565622683`*^9, 
   3.89505188545142*^9}, {3.89505234913691*^9, 3.895052350036742*^9}, {
   3.895052411228763*^9, 3.895052411539709*^9}, {3.8951015738222933`*^9, 
   3.895101645563303*^9}, {3.8951920744913893`*^9, 3.895192163656828*^9}, {
   3.895192197964961*^9, 3.8951922315908747`*^9}, {3.895192266140436*^9, 
   3.8951922832016287`*^9}, {3.895192328384461*^9, 3.89519233228798*^9}, {
   3.895192369964458*^9, 3.8951925588590918`*^9}, {3.8951926969729347`*^9, 
   3.89519272159969*^9}, {3.8952038664874268`*^9, 3.895203869812825*^9}, {
   3.8952039756123743`*^9, 3.8952039771710167`*^9}, {3.895206507243376*^9, 
   3.895206508327588*^9}, {3.895206823377679*^9, 3.89520682560001*^9}, {
   3.89520687137433*^9, 3.895206917172819*^9}, {3.8952952436196957`*^9, 
   3.89529526916186*^9}, {3.895566252341651*^9, 3.895566264328432*^9}, {
   3.8955663231108932`*^9, 3.895566369927742*^9}, {3.8955664260666227`*^9, 
   3.895566428588315*^9}, {3.895571710855856*^9, 3.895571735935749*^9}, {
   3.895645239560195*^9, 3.895645282510805*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"87ed7f14-6861-44a5-aca1-d358fa68f528"],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"1", "0", "0", "0"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {4, 4}, 0, {1, {{0, 0, 0, 1, 1}, {{1}}}, {1}}]]]]], "Print",
 CellChangeTimes->{{3.895566191314062*^9, 3.895566195126101*^9}, 
   3.8955662650192537`*^9, {3.895566422249055*^9, 3.895566429202458*^9}, {
   3.895571727739067*^9, 3.895571749053225*^9}, 3.8956331727211742`*^9, 
   3.895635193240839*^9, {3.895636915085534*^9, 3.895636915189992*^9}, {
   3.8956450535869217`*^9, 3.89564505368364*^9}, 3.895645130633408*^9, {
   3.895645292437129*^9, 3.895645306539137*^9}, {3.895715253525692*^9, 
   3.895715253720853*^9}},
 CellLabel->
  "During evaluation of \
In[35]:=",ExpressionUUID->"0d8db76b-ad20-4823-9f5d-79ba3ab3ed93"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "0", "0", "0"},
     {"0", "1", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {4, 4}, 0, {1, {{0, 0, 0, 0, 1}, {{2}}}, {1}}]]]]], "Print",
 CellChangeTimes->{{3.895566191314062*^9, 3.895566195126101*^9}, 
   3.8955662650192537`*^9, {3.895566422249055*^9, 3.895566429202458*^9}, {
   3.895571727739067*^9, 3.895571749053225*^9}, 3.8956331727211742`*^9, 
   3.895635193240839*^9, {3.895636915085534*^9, 3.895636915189992*^9}, {
   3.8956450535869217`*^9, 3.89564505368364*^9}, 3.895645130633408*^9, {
   3.895645292437129*^9, 3.895645306539137*^9}, {3.895715253525692*^9, 
   3.895715253724103*^9}},
 CellLabel->
  "During evaluation of \
In[35]:=",ExpressionUUID->"26c6ae53-7a36-4656-ac61-327a6edd147e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Protocol", "Section",
 CellChangeTimes->{{3.8955661296131287`*^9, 3.895566141401825*^9}, {
  3.895566445736238*^9, 
  3.895566447079114*^9}},ExpressionUUID->"c2564edb-378c-4601-9de6-\
67cc5daf883f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Applying", " ", "the", " ", "first", " ", "Beam", " ", "splitter", " ", 
    RowBox[{"(", "BS", ")"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Upper", " ", "path"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"uL", " ", "=", " ", 
     RowBox[{
      RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", "\[DoubleStruckA]L"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"uR", " ", "=", " ", 
     RowBox[{
      RowBox[{"Cos", "[", "\[Theta]1", "]"}], " ", "\[DoubleStruckA]R"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Down", " ", "path"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dL", " ", "=", " ", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", "\[DoubleStruckA]L"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dR", " ", "=", " ", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "\[Theta]1", "]"}], " ", "\[DoubleStruckA]R"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.895566449944111*^9, 3.8955665950633297`*^9}, {
   3.8955680053515043`*^9, 3.895568147477708*^9}, {3.895633184585075*^9, 
   3.895633207962439*^9}, 3.895635218761813*^9},
 CellLabel->"In[69]:=",ExpressionUUID->"088a8be7-7df3-45fd-aaf8-f5da85661798"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Defining", " ", "the", " ", "hamiltonian", " ", "and", " ", "light"}], 
    "-", 
    RowBox[{
    "matter", " ", "interaction", " ", "for", " ", "the", " ", "upper", " ", 
     "path"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"H0upper", " ", "=", " ", 
     RowBox[{
      RowBox[{"\[CapitalDelta]L", " ", 
       RowBox[{
        RowBox[{"\[Sigma]L", "\[ConjugateTranspose]"}], ".", "\[Sigma]L"}]}], 
      "+", 
      RowBox[{"\[CapitalDelta]R", " ", 
       RowBox[{
        RowBox[{"\[Sigma]R", "\[ConjugateTranspose]"}], ".", 
        "\[Sigma]R"}]}]}]}], " ", ";"}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"\[CapitalDelta]", "'"}], "s", " ", "are", " ", "the", " ", 
     "detunings", " ", "relative", " ", "to", " ", "the", " ", "source"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Hintupper", " ", "=", " ", 
     RowBox[{
      RowBox[{"-", 
       FractionBox[
        RowBox[{"\[ImaginaryI]", " ", 
         SqrtBox["\[Eta]lm"], 
         SqrtBox[
          RowBox[{"\[Gamma]", " ", "\[Eta]", " ", "\[Kappa]"}]]}], "2"]}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Sigma]L", "\[ConjugateTranspose]"}], ".", "uL"}], "-", 
        RowBox[{
         RowBox[{"uL", "\[ConjugateTranspose]"}], ".", "\[Sigma]L"}], "+", 
        RowBox[{
         RowBox[{"\[Sigma]R", "\[ConjugateTranspose]"}], ".", "uR"}], " ", 
        "-", " ", 
        RowBox[{
         RowBox[{"uR", "\[ConjugateTranspose]"}], ".", "\[Sigma]R"}]}], 
       ")"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Hupper", " ", "=", " ", 
     RowBox[{"H0upper", " ", "+", " ", "Hintupper"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.895568157264983*^9, 3.8955682550410223`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"695fd1db-3359-424d-9c14-4b4d67b7c249"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Defining", " ", "the", " ", "output", " ", "modes"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Luout", " ", "=", " ", 
     RowBox[{
      SqrtBox["\[Eta]d"], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SqrtBox["\[Gamma]"], "\[Sigma]L"}], " ", "+", " ", 
        RowBox[{
         SqrtBox[
          RowBox[{"\[Kappa]", " ", "\[Eta]"}]], "uL"}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Ruout", " ", "=", " ", 
     RowBox[{
      SqrtBox["\[Eta]d"], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SqrtBox["\[Gamma]"], "\[Sigma]R"}], " ", "+", " ", 
        RowBox[{
         SqrtBox[
          RowBox[{"\[Kappa]", " ", "\[Eta]"}]], "uR"}]}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Ldout", " ", "=", " ", 
     RowBox[{
      SqrtBox["\[Eta]d"], 
      RowBox[{"(", " ", 
       RowBox[{
        SqrtBox[
         RowBox[{"\[Kappa]", " ", "\[Eta]"}]], "dL"}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Rdout", " ", "=", " ", 
     RowBox[{
      SqrtBox["\[Eta]d"], 
      RowBox[{"(", 
       RowBox[{
        SqrtBox[
         RowBox[{"\[Kappa]", " ", "\[Eta]"}]], "dR"}], ")"}]}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.8955683139479837`*^9, 3.895568431953308*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"50c8e7e8-2681-4265-84b5-c12c5f73655a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Interference", " ", "at", " ", "the", " ", "2", "nd", " ", "BS"}],
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Output", " ", "field", " ", "directed", " ", "to", " ", "the", " ", 
    "detector", " ", "1"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"RoutD1", " ", "=", " ", 
     RowBox[{
      RowBox[{"Ruout", " ", 
       RowBox[{"Cos", "[", "\[Theta]2", "]"}]}], " ", "+", " ", 
      RowBox[{"\[ImaginaryI]", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}], "]"}], "Rdout", " ", 
       RowBox[{"Sin", "[", "\[Theta]2", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"LoutD1", " ", "=", " ", 
     RowBox[{
      RowBox[{"Luout", " ", 
       RowBox[{"Cos", "[", "\[Theta]2", "]"}]}], " ", "+", " ", 
      RowBox[{"\[ImaginaryI]", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}], "]"}], "Ldout", " ", 
       RowBox[{"Sin", "[", "\[Theta]2", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Output", " ", "field", " ", "routed", " ", "to", " ", "the", " ", 
     "detector", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"RoutD2", " ", "=", " ", 
     RowBox[{
      RowBox[{"Rdout", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}], "]"}], " ", 
       RowBox[{"Cos", "[", "\[Theta]2", "]"}]}], " ", "+", " ", 
      RowBox[{"\[ImaginaryI]", " ", "Ruout", " ", 
       RowBox[{"Sin", "[", "\[Theta]2", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"LoutD2", " ", "=", " ", 
     RowBox[{
      RowBox[{"Ldout", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}], "]"}], " ", 
       RowBox[{"Cos", "[", "\[Theta]2", "]"}]}], " ", "+", " ", 
      RowBox[{"\[ImaginaryI]", " ", "Luout", " ", 
       RowBox[{"Sin", "[", "\[Theta]2", "]"}]}]}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.895569883238513*^9, 3.895569976950452*^9}, {
  3.8955700155768747`*^9, 3.8955700476974697`*^9}, {3.895570088482608*^9, 
  3.895570207026919*^9}, {3.895570258128756*^9, 3.8955702675842648`*^9}, {
  3.895634608563608*^9, 3.8956346584093723`*^9}, {3.895635238047105*^9, 
  3.895635239224527*^9}, {3.895646196011395*^9, 3.895646230375183*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"3adbd642-da89-47ce-bf23-3f0851d09499"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Vectorized", " ", "superoperators"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"PrettyTiming", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[ScriptCapitalH]", " ", "=", " ", 
     RowBox[{"UnitaryToVec", "@", "Hupper"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "System", " ", "decay", " ", "channels", " ", "with", " ", "correlation",
       " ", "due", " ", "to", " ", "cascaded", " ", "coupling"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"\[ScriptCapitalD]\[Gamma]", " ", "=", " ", 
     RowBox[{
      RowBox[{"LindbladToVec", "[", "Luout", "]"}], " ", "+", " ", 
      RowBox[{"LindbladToVec", "[", "Ruout", "]"}], "+", 
      RowBox[{"LindbladToVec", "[", "Ldout", "]"}], " ", "+", " ", 
      RowBox[{"LindbladToVec", "[", "Rdout", "]"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", "\[Eta]"}], ")"}], "\[Kappa]", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"LindbladToVec", "[", "\[DoubleStruckA]R", "]"}], "+", 
         RowBox[{"LindbladToVec", "[", "\[DoubleStruckA]L", "]"}]}], 
        ")"}]}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"System", " ", 
      RowBox[{"(", "\[Gamma]s", ")"}], " ", "and", " ", "input", " ", "field",
       " ", 
      RowBox[{"(", "\[Kappa]s", ")"}], " ", "dephasing"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"\[ScriptCapitalD]\[Gamma]s", " ", "=", " ", 
     RowBox[{
      RowBox[{"\[Gamma]s", " ", 
       RowBox[{"LindbladToVec", "[", 
        RowBox[{
         RowBox[{"\[Sigma]L", "\[ConjugateTranspose]"}], ".", "\[Sigma]L"}], 
        "]"}]}], "+", 
      RowBox[{"\[Gamma]s", " ", 
       RowBox[{"LindbladToVec", "[", 
        RowBox[{
         RowBox[{"\[Sigma]R", "\[ConjugateTranspose]"}], ".", "\[Sigma]R"}], 
        "]"}]}], "+", 
      RowBox[{"\[Kappa]s", " ", 
       RowBox[{"LindbladToVec", "[", 
        RowBox[{
         RowBox[{"\[DoubleStruckA]L", "\[ConjugateTranspose]"}], ".", 
         "\[DoubleStruckA]L"}], "]"}]}], "+", 
      RowBox[{"\[Kappa]s", " ", 
       RowBox[{"LindbladToVec", "[", 
        RowBox[{
         RowBox[{"\[DoubleStruckA]R", "\[ConjugateTranspose]"}], ".", 
         "\[DoubleStruckA]R"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Conditional", " ", 
      RowBox[{"evolution", ":", " ", 
       RowBox[{"jump", " ", "operators", " ", "at", " ", "the", " ", 
        RowBox[{"detector", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"\[ScriptCapitalJ]\[Eta]d", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "\[Eta]RD1"}], " ", 
       RowBox[{"JumpOp", "[", "RoutD1", "]"}]}], "-", 
      RowBox[{"\[Eta]RD2", " ", 
       RowBox[{"JumpOp", "[", "RoutD2", "]"}]}], "-", 
      RowBox[{"\[Eta]LD1", " ", 
       RowBox[{"JumpOp", "[", "LoutD1", "]"}]}], "-", 
      RowBox[{"\[Eta]LD2", " ", 
       RowBox[{"JumpOp", "[", "LoutD2", "]"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.895569755705752*^9, 3.895569813529174*^9}, {
   3.895570289058546*^9, 3.895570419138122*^9}, {3.8955705355043383`*^9, 
   3.8955707199219723`*^9}, {3.895571199597023*^9, 3.8955713522289953`*^9}, 
   3.895571442230159*^9, {3.895633320111162*^9, 3.8956333228398037`*^9}, 
   3.895634655542013*^9, {3.895635240338315*^9, 3.895635243578396*^9}, {
   3.895646235294897*^9, 3.895646252119437*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"00f11c30-c5d2-47d0-907e-e24159ae6916"],

Cell[BoxData["\<\"0h : 0m : 1s\"\>"], "Print",
 CellChangeTimes->{
  3.8955714089442883`*^9, 3.8955718223286333`*^9, {3.89563331319876*^9, 
   3.8956333280135612`*^9}, 3.8956335419957733`*^9, 3.8956352493509283`*^9, 
   3.895636930458663*^9, 3.895645319192299*^9, {3.89564626820583*^9, 
   3.895646292835628*^9}, 3.895715297033141*^9},
 CellLabel->
  "During evaluation of \
In[84]:=",ExpressionUUID->"3e91b74a-397e-43c2-a4e5-88eea2ec6a23"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[ScriptCapitalL]", " ", "=", " ", 
   RowBox[{
   "\[ScriptCapitalH]", "+", "\[ScriptCapitalD]\[Gamma]", "+", 
    "\[ScriptCapitalD]\[Gamma]s", "+", "\[ScriptCapitalJ]\[Eta]d"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.895570474762664*^9, 3.8955705044881067`*^9}, 
   3.895571474189156*^9, {3.895633331421926*^9, 3.8956333332788982`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"8c127d8f-97c8-49fd-a4b7-9cd0aad79765"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Dimensions", "@", "\[ScriptCapitalL]"}], "\[IndentingNewLine]", 
 RowBox[{"Head", "@", "\[ScriptCapitalL]"}]}], "Input",
 CellChangeTimes->{{3.895571463938205*^9, 3.8955714688405867`*^9}, {
  3.8956360552131166`*^9, 3.895636055390999*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"56aa1b0e-7316-484f-94bf-3208ed783d3b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4096", ",", "4096"}], "}"}]], "Output",
 CellChangeTimes->{
  3.895636939696876*^9, 3.8956453283303003`*^9, 3.895645944938509*^9, {
   3.895646276864215*^9, 3.8956463008739643`*^9}, {3.895715305900132*^9, 
   3.895715315568944*^9}},
 CellLabel->"Out[88]=",ExpressionUUID->"55a9d9b2-c44d-4582-a868-d095e3d2469f"],

Cell[BoxData["SparseArray"], "Output",
 CellChangeTimes->{
  3.895636939696876*^9, 3.8956453283303003`*^9, 3.895645944938509*^9, {
   3.895646276864215*^9, 3.8956463008739643`*^9}, {3.895715305900132*^9, 
   3.8957153155706453`*^9}},
 CellLabel->"Out[89]=",ExpressionUUID->"44cc63a8-d255-41c2-b4b7-2805df3d4b74"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "@", "\[ScriptCapitalL]"}]], "Input",
 CellChangeTimes->{{3.8957153190367928`*^9, 3.895715335489221*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"3f489501-b643-4a2a-8609-55cd18b117d2"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzt2MGJFlEQhdEBIzESczAE0bUpG4IhiMyslF68n/e6bnWdATmDq7KhP679
+dvPrz8+vb29ff/48/f395/fX0jyrL8+/Pdn9e+r/x0k56pXJKvctaP0imSV
ekWySjuKZHd1jGSV+kOyuzpGskr9IdldHSPZRf0hmaYdRbJK/SHZ3bSO6SQ5
x7T+kOSqXXqVdg/J+99rHSCZZlrH9JOcY1p/SHLVtI7pJznHtP6Q5KpdOqaf
5BzT+kOSV6btKP0k55jWH5JcNa1j+knOMa0/JLlql16l3UPy/vdaB0immdYx
/STnmNYfkly1S8f0k3yeXfpDklemdUw/SeoAyS7aUST1hyRfs0vH9JN8nl36
Q5JXpvUq7R6S+f3RAZJVpnVMP8k5pvWHJFft0jH9JJ9nl/6Q5JVpHdNPco5p
/SHJVdM6pp8kd/Wh+l6SzzdtR+26s/q5kp1Me7/S+kOSV3bZUav3Vz9XspNp
73X3O0nOscteIpnTgbR7dIlkld2/R5G8vwNp9+gPySrtKJJd3usud5Kcox1F
Mu291h+SXbSjSKa91/pDsotpO0onyfwOuJMk3+3y/760e8gnmfZ+dekSSXb/
HqWf5P0dSLtHB0hWaUeR7PJ+dbmTJNP2jH6SOe972j06QLJK36NIpr1fOkCy
i3YUybT3SwdIdrFLr9LuIZ9k2vvVpUsk6XsUyS7vV5c7Sc4xbUfturP6uZKd
THu/0vpDklfaUSTT3q+0/pDklWk7Sj/JHNPeLx0gmWbajtp1Z/VzJXnf+64D
JKtM61XaPSTvVwdIdjHte5R+ktzVh+p7ST7ftB21687q50ryvvddB0hWmbaj
9JOkDpDsoh1Fsos6QDLNtB21687q50ryPnWAZJVddtTq/dXPlSRJPt8ue4kk
V9Urkqft/j2KJK/UK5KntaNIPlW9InlaO4rkU9Urkqe1o0g+Vb0iedq0HaV7
JE+rJyR32eW7U9o9JPPVB5Kn7f49SidJXqkbJE9rR5F8qrpB8rRpO2rXndXP
lWS9ukHytGk7Km2/keyrbpA8rR1F8qnqBsnTdtktafeQJEn6HkXyqeoGydOm
7ahdd1Y/V5L16gbJ09pRJJ+qbpA8bdqOSttvJPuqGyRPm7ajdt1Z/VxJ1qsb
JE/bfS/pIUmSrDLte5QdRXKXukHytGk7ated1c+VZL26QfK0aTsqbb+R7Ktu
kDytHUXyqeoGydOm7ahdd1Y/V5L16gbJ03bZUav3Vz9XkrnqBslddtlLJEmS
aXb/HkWSJFmlHUWSJPmadhRJkuRr2lEkSZKvmbaj7DSS3dUrco5dvjul3UOS
V+oVOcfu36N0iWSaekXO0Y4iyb3qFTnHtB21687q50pyrnpFzjFtR6XtN5Jc
Va/IOdpRJLlXvSLn2GW3pN1DklfqFTlH36NIcq96Rc4xbUfturP6uZKcq16R
c7SjSHKvekXOMW1Hpe03klxVr8g5pu2oXXdWP1eSc9Urco7d95IukUxTr8g5
pn2PsqNIdlevyDmm7ahdd1Y/V5Jz1Styjmk7Km2/keSqekXO0Y4iyb3qFcm0
PaNLJLuoVyT/9w+PSaVg
   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{99.98779296875, 
       FormBox["1", TraditionalForm]}, {75.59814453125, 
       FormBox["1000", TraditionalForm]}, {51.18408203125, 
       FormBox["2000", TraditionalForm]}, {26.77001953125, 
       FormBox["3000", TraditionalForm]}, {0.01220703125, 
       FormBox["4096", TraditionalForm]}}, {{99.98779296875, 
       FormBox["1", TraditionalForm]}, {75.59814453125, 
       FormBox["1000", TraditionalForm]}, {51.18408203125, 
       FormBox["2000", TraditionalForm]}, {26.77001953125, 
       FormBox["3000", TraditionalForm]}, {0.01220703125, 
       FormBox["4096", TraditionalForm]}}}, {{{0.01220703125, 
       FormBox["1", TraditionalForm]}, {24.40185546875, 
       FormBox["1000", TraditionalForm]}, {48.81591796875, 
       FormBox["2000", TraditionalForm]}, {73.22998046875, 
       FormBox["3000", TraditionalForm]}, {99.98779296875, 
       FormBox["4096", TraditionalForm]}}, {{0.01220703125, 
       FormBox["1", TraditionalForm]}, {24.40185546875, 
       FormBox["1000", TraditionalForm]}, {48.81591796875, 
       FormBox["2000", TraditionalForm]}, {73.22998046875, 
       FormBox["3000", TraditionalForm]}, {99.98779296875, 
       FormBox["4096", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.895715320648981*^9, 3.895715337270145*^9}},
 CellLabel->"Out[91]=",ExpressionUUID->"65a0f924-10f3-43e9-bf6e-5b85bd42aa6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fock-Liouville space exploration", "Subsection",
 CellChangeTimes->{{3.89563532149632*^9, 
  3.895635329416583*^9}},ExpressionUUID->"7bb08fb0-8917-4eeb-bfab-\
3aa1ed8197bb"],

Cell["Choose a parameter set to explore the Fock-Liouville space:", "Text",
 CellChangeTimes->{{3.8957153674206038`*^9, 3.895715369699946*^9}},
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"048e9049-af8f-4d3f-8e60-f7fda25ae38b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"par", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[CapitalDelta]L", "\[Rule]", "0"}], ",", 
     RowBox[{"\[CapitalDelta]R", "\[Rule]", "0"}], ",", " ", 
     RowBox[{"(*", " ", "Detunings", " ", "*)"}], 
     RowBox[{"\[Gamma]", "\[Rule]", "1"}], ",", 
     RowBox[{"\[Kappa]", "\[Rule]", "0.01"}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{"Decay", " ", "rates"}], " ", "*)"}], 
     RowBox[{"\[Eta]", "\[Rule]", "0.9"}], ",", 
     RowBox[{"\[Eta]lm", "\[Rule]", "0.9"}], ",", 
     RowBox[{"\[Eta]d", "\[Rule]", "0.9"}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Input", "/", "coupling"}], " ", "efficiency"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"\[Eta]RD1", "\[Rule]", "0.5"}], ",", 
     RowBox[{"\[Eta]RD2", "\[Rule]", "0.5"}], ",", 
     RowBox[{"\[Eta]LD1", "\[Rule]", "0.5"}], ",", 
     RowBox[{"\[Eta]LD2", "\[Rule]", "0.5"}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{"Detector", " ", 
       RowBox[{"efficiency", "/", "conditional"}], " ", "evolution", " ", 
       "parameters"}], " ", "*)"}], 
     RowBox[{"\[Gamma]s", "\[Rule]", "0.1"}], ",", 
     RowBox[{"\[Kappa]s", "\[Rule]", "0.1"}], ",", 
     RowBox[{"(*", " ", "Dephasing", " ", "*)"}], 
     RowBox[{"\[Phi]", "\[Rule]", "0.235"}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{"interferometer", " ", "phase"}], " ", "*)"}], 
     RowBox[{"\[Theta]1", "\[Rule]", "0.412"}], ",", 
     RowBox[{"\[Theta]2", "\[Rule]", "0.12"}]}], 
    RowBox[{"(*", " ", 
     RowBox[{"Beam", " ", "splitter", " ", "ratios"}], " ", "*)"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.89557152522749*^9, 3.89557153047293*^9}, {
  3.895572581674637*^9, 3.895572582991213*^9}, {3.8956338043571978`*^9, 
  3.895633809532177*^9}, {3.895635315469111*^9, 3.895635346888576*^9}, {
  3.895715357507844*^9, 3.895715362072981*^9}, {3.895716225824101*^9, 
  3.895716240682508*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"a1548c1a-5a3f-43e1-9066-118122f4f0bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Choose", " ", "an", " ", "initial", " ", "state", " ", "to", " ", 
    "reduce", " ", "the", " ", "necessary", " ", 
    RowBox[{"subspace", ":", " ", 
     RowBox[{
      RowBox[{"gs", " ", "spin", " ", "superposition"}], " ", "+", " ", "H", 
      "-", 
      RowBox[{"polarized", " ", "input", " ", "coherent", " ", "state", " ", 
       RowBox[{"(", 
        RowBox[{"up", " ", "to", " ", "3", " ", "photons"}], ")"}]}]}]}]}], 
   " ", "*)"}], 
  RowBox[{"(*", 
   RowBox[{"gs", " ", "spin", " ", "superposition"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"spinUp", "+", "spinDw"}], "//", "mf"}], ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "My", " ", "ordering", " ", "is", " ", "different", " ", "from", " ", 
     RowBox[{"Stephen", "'"}], "s", " ", 
     RowBox[{"one", "."}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"CoherentState", "[", "1", "]"}], "//", "N"}], "//", "mf"}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.895647781163063*^9, 3.895647795379517*^9}},
 CellLabel->
  "In[312]:=",ExpressionUUID->"fc5b8126-6d0c-4492-a586-632cef101d5c"],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {"0"},
      {"0"},
      {"1"},
      {"1"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
    SparseArray[
    Automatic, {4}, 0, {1, {{0, 2}, {{3}, {4}}}, {1, 1}}]]]]], "Print",
 CellChangeTimes->{3.8956477962325077`*^9},
 CellLabel->
  "During evaluation of \
In[312]:=",ExpressionUUID->"bb9a2be8-592d-4c85-af99-893aa4a55bba"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {"0.6065306597126334`"},
      {"0.6065306597126334`"},
      {"0.4288819424803534`"},
      {"0.24761510494160163`"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Print",
 CellChangeTimes->{3.8956477962360783`*^9},
 CellLabel->
  "During evaluation of \
In[312]:=",ExpressionUUID->"a156f1d7-2bef-4466-80b4-c472360a9f95"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test1", "=", 
  RowBox[{"Flatten", "@", 
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8957155356239347`*^9, 3.89571558293176*^9}, {
  3.895715666370184*^9, 3.895715668067543*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"62371075-389b-4350-8f06-1f05fa6b61d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.895715542596231*^9, 3.895715549106436*^9}, {
   3.895715579877532*^9, 3.895715583241321*^9}, 3.895715690401278*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"04a6258f-179e-4553-a5af-c82bf451963e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test11", " ", "=", " ", 
  RowBox[{"Flatten", "@", 
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{"test1", ",", "test1"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.895715671927657*^9, 3.895715709430859*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"64bf8ff5-5753-402d-a86f-1b306a465324"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.895715691746089*^9, 3.89571570972204*^9}},
 CellLabel->
  "Out[106]=",ExpressionUUID->"79836c3c-825b-4fa9-9061-d284af7bf2c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test2", "=", 
  RowBox[{"kron", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8957154959691353`*^9, 3.895715511109029*^9}, 
   3.8957155715564423`*^9, {3.895715635320834*^9, 3.8957156636808853`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"aa0c8ade-dcb1-4b58-b835-fdffd2440a0f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.89571549270601*^9, 3.895715511377372*^9}, 
   3.895715572335446*^9, 3.895715637281666*^9, 3.8957157162624197`*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"22891ac3-847b-4144-8f68-9e589695520b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"kron", "[", 
  RowBox[{"test", ",", "test"}], "]"}]], "Input",
 CellChangeTimes->{{3.895715638853055*^9, 3.895715643070078*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"942e17ef-62e3-4f31-bcab-56352526c19a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0"}], "}"}]], "Output",
 CellChangeTimes->{3.895715643657062*^9, 3.895715719011223*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"9224f215-306e-4c31-82e5-2e654668c605"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"istate", "=", 
   RowBox[{"kron", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"istate", "=", 
   RowBox[{"kron", "[", 
    RowBox[{"istate", ",", "istate"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8956478248325768`*^9, 3.895647830439632*^9}, 
   3.895715599049316*^9, {3.8957157355439043`*^9, 3.89571574011062*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"0c6887f8-2f71-4a9d-a974-0aedea3eccf4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"aux1", " ", "=", " ", 
    RowBox[{
     RowBox[{"Sign", "[", "istate", "]"}], "*", 
     RowBox[{"Range", "[", 
      SuperscriptBox["totaldimension", "2"], "]"}]}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Sign", " ", "of", " ", "initial", " ", "state", " ", "assigns", " ", "1",
      " ", "to", " ", "positive", " ", "values"}], ",", " ", 
    RowBox[{
     RowBox[{
     "0", " ", "when", " ", "the", " ", "value", " ", "is", " ", "0", " ", 
      "and"}], " ", "-", 
     RowBox[{"1", " ", "when", " ", "the", " ", "value", " ", "is", " ", 
      RowBox[{"negative", ".", " ", 
       RowBox[{"Range", "[", "Dim2", "]"}]}], " ", "makes", " ", "a", " ", 
      "big", " ", "list", " ", "going", " ", "from", " ", "1", " ", "to", " ",
       "4096.", " ", "The", " ", "output", " ", "is", " ", "a", " ", "list", 
      " ", "with", " ", "a", " ", "bunch", " ", "of", " ", "zeros", " ", 
      "and", " ", "the", " ", "indexes", " ", "of", " ", "the", " ", 
      "initial", " ", "nodes", " ", "where", " ", "the", " ", "values", " ", 
      "are", " ", "not", " ", 
      RowBox[{"zero", "."}]}]}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.895647852742264*^9, 3.895647855941658*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"ee5e25bc-e96e-4b30-893e-680fa9ad33fa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"initialnodes", "=", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{"aux1", ",", "0"}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "every", " ", "place", " ", "where", " ", "the", " ", "value", " ", "of", 
    " ", "aux", " ", "1", " ", "is", " ", "zero", " ", "are", " ", 
    "neglected"}], "*)"}]}]], "Input",
 CellChangeTimes->{3.895647891962637*^9},
 CellLabel->
  "In[112]:=",ExpressionUUID->"43090796-e4d5-4fb3-9959-44b8b708f8d9"],

Cell[CellGroupData[{

Cell[BoxData["initialnodes"], "Input",
 CellChangeTimes->{{3.895640493956541*^9, 3.8956404950709476`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"10140ab9-771b-4707-a0b3-d71ce46435d4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2081", ",", "2085", ",", "2089", ",", "2093", ",", "2097", ",", "2101", 
   ",", "2105", ",", "2109", ",", "2337", ",", "2341", ",", "2345", ",", 
   "2349", ",", "2353", ",", "2357", ",", "2361", ",", "2365", ",", "2593", 
   ",", "2597", ",", "2601", ",", "2605", ",", "2609", ",", "2613", ",", 
   "2617", ",", "2621", ",", "2849", ",", "2853", ",", "2857", ",", "2861", 
   ",", "2865", ",", "2869", ",", "2873", ",", "2877", ",", "3105", ",", 
   "3109", ",", "3113", ",", "3117", ",", "3121", ",", "3125", ",", "3129", 
   ",", "3133", ",", "3361", ",", "3365", ",", "3369", ",", "3373", ",", 
   "3377", ",", "3381", ",", "3385", ",", "3389", ",", "3617", ",", "3621", 
   ",", "3625", ",", "3629", ",", "3633", ",", "3637", ",", "3641", ",", 
   "3645", ",", "3873", ",", "3877", ",", "3881", ",", "3885", ",", "3889", 
   ",", "3893", ",", "3897", ",", "3901"}], "}"}]], "Output",
 CellChangeTimes->{3.895647901654832*^9, 3.8957157507503033`*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"a70a53ee-7d51-4fc7-ab67-6304d71701be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Head", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "%%"}]}], "Input",
 CellChangeTimes->{{3.895647908437636*^9, 3.8956479145564404`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"9ab660b7-ec2d-4a5b-bc9a-6419c803967d"],

Cell[BoxData["List"], "Output",
 CellChangeTimes->{3.895647914968708*^9, 3.895715753559825*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"c7a3baa1-c641-4080-a196-d1401dab5ad2"],

Cell[BoxData[
 RowBox[{"{", "64", "}"}]], "Output",
 CellChangeTimes->{3.895647914968708*^9, 3.8957157535619593`*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"d90cb2d6-90b6-4641-ade0-26e2f39b73a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aux2", "=", " ", 
  RowBox[{"NumericQ", "/@", 
   RowBox[{"Vec", "[", 
    RowBox[{"\[ScriptCapitalL]", "+", 
     RowBox[{"x", "*", 
      RowBox[{"Eye", "[", 
       RowBox[{"Length", "[", "\[ScriptCapitalL]", "]"}], "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[210]:=",ExpressionUUID->"d17711a9-9427-4480-b560-c2c20dd71353"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["18432", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "16777216", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["18432", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "16777216", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.0010986328125`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", "1", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "False", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "37", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "False", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "2081", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "False", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "2305", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "False", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[Automatic, {16777216}, True, {1, {{0, 18432}, CompressedData["
1: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
vrk1Sv+GbvN8n3w4Sh5Go2VkPFo+8LBmbTNanvajZewwWr7wdGXtNlpeHqNl
4jlafvAKYB04Wt6ho2UaNlpj4B3DOpb9iXTBLGm0/GGUxTPMsunJoxPm+aMV
AONCnmFeRF8x3bAoGa1AmJTxDItyehdwBiwrRisIppU8w7KK3mrOgVXNaAXD
rI5nWNXTu55zYL1htEJg3sgzrJvobeYc2LSM1lhYtPEMm3Z6d3MObDtGaxws
O3mGbRe9hzgHdodZd7OGXQ+dpzgDg06zvsAagy7S10s/Bl9h3c8agwfoukU3
htxm/YA1hjwcLXtjD4XB3sZDDg4eCoeDm4ccPT0UAcdADw0NQyzfJHrIKclD
UbDPYp3Nt3kecs730Hg4FLIuYk+xh4aVeGgCHMtYl7N/gYeGV5CVZBV7qz3k
UuOhGDjVsa5n73oPuW7wUCycG1k3sbfZQ24tHorDsDbW7ezf7aERHWQn2cXe
Qx5yP+yhiXDpZt3D3lMeGnnaQ5PgeoH1Rfb2emjUFQ8lwK2f9QD7b3lo9G3y
AfnQQx7GnvKw8ZSnA9w85eWJQE95hyGW3xI9ZZTkKR94ZJHZfJfnKeN8T/nC
s5AsYk+xp0xKPOUHrzKynP0LPGVa4akx8K4kq9hf7SmzGk/5w6eOrGf/ek+Z
b/BUAHwbySb2N3vKosVTgfBrI9vZv9tTlh2eCsKYTrKL/Yc8ZXXYU8Hw7yZ7
2H/KU9anPRWCgAvkRfb3esrmiqfGIrCfHGD/LU/Z3vbUOAQ9IB96KtTYS6E2
XrJ38FKYgZuXHDy9FG4Q6CXHMC9FGMTyXaKXIpPILDKbb/O85JTvpSiEFZJF
7Cn2knOJl8YjvIwsZ+8CLw2r8NIERFSSVeyv9lJ0DVlH1rN3vZdcNngpBlGN
ZBN7m73k2uKlWIxvI9vZu9tLbh1eisOETrKL/Ye8FH+Y7CZ72HvKS+6nvTQR
MRfIi+zt9dLIK16ahNh+coC9t7w06raXEhD3gHzopWIjbyUae+sZFFuztvFW
ib23jBy8lYRnUeLK2s1bsz28ZezprWQ8h9kBrAO9NSfUWyZh3krBXMyJYR1L
VyK9SE3yVikSs3hGajZ9eXTDLN9baShDUiHvkFZEbzFnwLzEW+koR3IZ75Be
Tv8CzoJFhbcyMA8plbxDRhVnVHMmMmu89TxS63hGZj396zkPVhu8lYUXkNbI
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
zhCuKqdw1aERTzy5N4ar2hSuS3iKxjD6zOHabwnXZTzD02Rq08P1PIP73HAd
yAvXVfyD56Xcl4frYEW4fsS/+GcnfVXhOlQdrp/wH/49Qu2JcL2o5b4uXIcv
hesaXuLFde5vh+tIfbiu4xVePqDvSbiONobrBvSU31+Gq3fzCDVpEaE+mNI+
Qu92jtBrXSLUF016RegTvNc3Qk37RagfXhsaoal4f1SEXh8dof5oOilC09DE
mhw0mx6hAbCaS70TWWjuHKGBaOYVIWs0NZGHFgERGoTm4RGajtctZKJlbIQ+
QIuUCNmgWQaZaJUZocGYsYKePDLROj9CQ9CqLEIz0aKCTLTZEqGhaL0rQrPQ
sppMvLE/QsPQ5miEPkWrWjLR9mSEZp+j/hJ5aHeZ325EaA7a1JOF9nf4/WGE
5uKNRnLQ4Sm/v4qQLTq2iNSHGN4+UnZ4s0ukRqBjL36HPd7qF6mP8OZQ7uCA
/43m90n8Dkd0tI5Up+mRGoWRcyNlwJtOkersHKnR6OTFHZzwlilSXQIiNQad
w7mHM/5niVTXWO5SuIMLOmVEqltmpMZh7IpIuaJzXqS650dqPLqVcQc3dKmI
1NtbIvUxuu/iHu7oWh2p/9vP3VHuMA/daiPV42SkJmLCuUh5oPulSPW8HKlJ
6HGDO3ji7fpI9boTqcno+ZB7eOH/GiP1zlPuXnEHb/RuESWf9lF6t0uUeveK
ki/e68d5aJT88P5ozpOi5I/e1lFqMj1KfWCcS41TlF5zjlJf9PGKkgnvmaLU
NCBK/dA3PEoBeN8Spddjo9Qf/VKiFIg+GVFqlhmlAQhaQW1elJrnR2kgBpRF
KRj9KqLUYkuUBmHgriiFoH91lFruj9IHGHQ0SvMxoDZKrU5GaTBCz1F7KUqt
L0dpCAbfiFIYBtVHqc2dKA3FkIdRCscHjVF642mUhmHoqyhFYHiLaEW2j1bH
LtH6EMN7RSsKb/aL1gh8ODRa0XhrdLQ+wohJ0YrBcOtojZweLfNcapyi1ck5
WqMw0itaFowwRatzQLRGY1R4tGLxkSVaXWKjNQajU6IVh5EZ0RqbGa34FdTl
RatbfrTGYWxZtBIwuiJa3bdEazzG7YpWIsZUR+vt/dH6GOOPRmsBxtZGa8LJ
aCWdo+5StHpcjtZETLgRrWSMr49WzzvRmoSJD6OVgo8bo9XrabQmY9KraKXC
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
mTt7xhlVeD7enV1zZ9c4I2k2GQvd2TfOqEHyUjJWubNz7uwcd9QiZT05W9zZ
O3f2jjve48V2sva6s3vu7B53pB4i74Q7+8cZ9Ug7Q9Yld3bQnR3kjgakXyfL
2Z09dGcPuaMRGV5k+buzi+7sIndkPiAvyp195IxmZCWQlerOTrqzk9zRguwc
sgrd2Ut39pI7VOyulxVk1bmzm+7sJnfktPJQTkcP5Xb30PW+PPFqsIdujOSJ
1+M99PdUnsibzbsLPfTAgDPyl/L+Kg85rPbQQ+SjYD1zWzzkaOqhRyjAm+3M
7/WQ0z4PheENCg+RccJD4dacUXSG+Usecr7soQgUofg6884ecnHxUCSKUeLF
vL+HXAM89BglKH1ARpSHoqI5oyyB+VQPuad5KBplKM9hvtBDHkUeikE53lYw
X+chz3oPxeItKlp5qqKjpyq7e8qrr6cSUIl3gz3lPdJTiXiHqvGeujPVU89Q
herZzC3kaeCpmqXMrPKUz2pPJaEGteuZ2+IpX1NPJaMW77czu9dTfvs8lYL3
qDtExgme1p6qP8PsJU/5X/ZUKurRcJ1ZZ08FuHgqDQ1o9GLW31OBAZ5KRyOa
HpARxTPaU80JzKZ6KjjNU5loRksOs4WeCinyVBZaoEpm6zwVWu+pbKjBU61a
3+b7/7ZadbqtYWjd47aG9OXZ77aG44Mht/XpSJ6jbmsE2ky4raFTeU67rc/Q
dg6zBsyi7aLb+hztljG/mnm0W3NbI9F+AxmmZKD91tsahQ93kLOPHHy4/7ZG
o8NhcqzJQYeTtzUGHc+Sc5kcdLxyW2PR6QY5LuSgk+ttjUNnb3ICyEHnwNv6
Al0ekhNNDrrE3FbXRDLSyEDX9Nvqlst8EfPoVnxb/6hktp5Z/KPhtrq39lL3
Tl6agB490M9LX+KjIRjlpYnoOQHTvNRrDu8a8FzkpcnovYz3V/Nc46Up6LOB
GVOeW730FT7ewdw+nvu99Mlh5qx5nvTSVPQ9y9xlnle8NA39bjDnwtPVS9PR
35u5AJ6BXhrwkLlonjFemomBicyl8Uz30iwMymWuiGexl77B/1UyV8+zwUuD
W3trcCdvDemBft76dAhGeWvoBEzz1rA59A281WoRZwxfxnurvdV6DWeM2MD7
pt76YCtnfLaDuX3earOfMz4/zJy1t9qe5IyRZ5m77K12Vzhj1A3mXLzV3pUz
RnszF+CtDwM5Y8xD5qK91SGGM8YmMpfmrY7pnDEul7kib3Uq5owvKpmr91bn
Bs4Y3/qOxne6owk97qh7P574csgd9RjFExMn3NFH03hi0hzeNeC56I4mL+Pd
1XfUaw1nTNnA+6Z31HsrZ3y1g5l9d9RnP2d8fZg5a54n72jqWWYu39EnVzhj
2g1mXO6orytnTPdmJuCO+gVyxoyHzEXzjLmjmYnMpN3RgHTOmJXLTNEdDSzm
jG8qmam/o0ENnDG79V2+r+9qdqe72og5Pe7yjX1XrfpxxiZ8O+Qu39p31XoU
Z2zG3Al3+ea+qw+mccbPmDeHHANyMG/RXW3B/GXkrCYHbddwhykWbCDLlCy0
28odW/HdDvL2kYf2+7nDDAsPk2lNJhaevCtzGJwl7zJ56HCFOyyw6AZ5LuSh
oyt3bIOhN3kB5KFTIHf8AqOHZEaTCaOYu1qcSFYaWeiSzh1LcskpIgddi7nj
n5Vk1JOBbg3csbS1D/vio6XYgWU9fNgbH/aGM37F90N82B8f9oczduKHCT7s
kQ97xBnL55Bh4MMuccZurFhGxmofdsqHneKOPVi5gRxTH3bLh93ijt/wrx1k
7fNhx3zYMe5YdZg8ax/2jDP2YfVZsi77sG8+7Bt37MeaG2S5+LB3Puwdd1hi
rTdZAT7snw/7xx3GD8mL9mEHOcMKJolkpfmwiz7sInccxLpcsop82EkfdpI7
fse/K8mq92E3fdhN7ljf2lfrO/lqQw9fDe7HEz8O8dWQUTzx0wRffTqNJzbO
4V0DX81exBmblvH+al8NW+OrOdiEzRuYM/XV8K2++hab8fMO5vf5asR+X83F
z9hymAxrX807yRmmZ5m/7KvPr/hqPkyx9QbzLr4a6eqrBdgKM2/mA3w1KtBX
38EM5g/JiPbVwhjOsEhkPs1XY9J9ZQALbMtlvshXY4t9tQjb8Esl8/W+Gtfg
K0P8gu2t/bS9k5929PDT+H5+Wood+HWInyaM8tMy/IqdE/z05TQ/fY+d2DWH
OQOei/y0exkzq/00aY2flmM39mxgztRPk7f6aQX24LcdzO7z05T9flqJ37D3
MBnWPE/6ad9ZZi/76esrflqFfdh/g1kXP0119dNq7IelN7MBfpoW6Kc1sMSB
h2RE84zxk1Uis2l+mpHuJ2NY4WAus0V+mlnsJxMcxO+VzNb7aVaDn9bhdxxq
fY/v63s61OmeHHC4xz2+se9pdj/OcMQfQ+7xrX1Pc0ZxhhOOTLjHN/c9fTuN
M27h6BxyDMjB0UX35Ixjy8hZTQ7mreEOFxzfQJYpWZi/lTtc8ecO8vaRhwX7
ucMNJw6TaU0mTpy8J3dYnyXvMnlYeIU7PHDyBnku5MHAlTs8YeNNXgB5WBTI
Hbdh+5DMaDJhG3NPpxLJSiMLRunccTqXnCJysLiYO/5TSUY9GVjSwB1nWvuz
X/46A2+c7eHPjvmzY5xxB38N8WfP/NkzzriLcxP82TV/do0zzs8hw8CffeMM
X1xYRsZqf3bOn53jDj9c3ECOqT9758/eccc9/HcHWfv82T1/do87Lh0mz9qf
/eOMAFw+S9Zlf3bQnx3kjkBcuUGWiz976M8eckcQrnqTFeDPLvqzi9xh95C8
aH/2kTNCYJ9IVpo/O+nPTnJHKK7lklXkz176s5fccR//qySr3p/d9Gc3ueN6
6wBd7xSgGz0CtL4fT/w9JEAbRvHEzQkB+nEaTzjM4V2DAB1axBmOy3h/dYA2
rgnQYTjCaQNzpgHatDVAf8AJt3Ywvy9Am/cH6AhuwfkwGdYBOnqSM1zOMn85
QFuuBOgYXOB6g3mXAJm6Bug4XOHmzXxAgLYGBuhPuMH9IRnRAToRwxkeicyn
Bcg8PUDW8IBnLvNFAbIoDtBJeOJ2JfP1AdrWECAb3IZX60B5dQqUd49Abe8X
qDPwxp0hgdoxKlBncQd3JwTq12mB+gt34TOHOQOeiwLlu4yZ1YHatSZQ5+EL
vw3MmQZq99ZAXYAf7u1gdl+g9uwP1EXcg/9hMqx5ngxUwFlmLwdq75VAXUIA
Am8w6xKofa6BuoxABHkzGxCo/YGBuoIgBD8kI5pnTKBCEplNC9SB9EDZIQSh
ucwWBcqqOFD2CMX9SmbrA3WwIVDXcB8PWgfxfR2kB52ClIeHPYL4xg7SoX6c
kY9HQ4L41g7S4VGcUYCwCUF8cwfpj2mc8Qbhc8gxIAfhi4JUiIhl5KwmB0fX
cEcRIjeQZUoWjm3ljmI83kHePvJwfD93lCDqMJnWZCLqZJBKEX2WvMvk4cQV
7ihDzA3yXMiDtSt3lCPWm7wA8nAykDveIu4hmdFkIi4mSPGJZKWRBdt07niS
S04ROThVzB1PK8moJwOnG7gjoXUw+xWsBFQisUcwOxbMjnHGOzwbEsyeBbNn
nFGF5xOC2bVgdo0zkuaQYRDMvnFGDZKXkbE6mJ0LZue4oxYpG8gxDWbvgtk7
7niPFzvI2hfM7gWze9yRepg862D2jzPqkXaWrMvB7GAwO8gdDUi/QZZLMHsY
zB5yRyMyvMkKCGYXg9lF7sh8SF50MPvIGc3ISiQrLZidDGYnuaMF2blkFQWz
l8HsJXeoJFgvK8mqD2Y3g9lN7shpHaKcTiHK7RGi6/144tWQEN0YxROvJ4To
72k8kTeHdw1C9GARZ+Qv4/3VIXJYE6KHyEfBBuZMQ+S4NUSPUIA3O5jfFyKn
/SEKwxsUHibDOkThJzmj6Czzl0PkfCVEEShC8Q3mXULk4hqiSBSjxJv5gBC5
BoboMUpQ+pCM6BBFxXBGWSLzaSFyTw9RNMpQnst8UYg8ikMUg3K8rWS+PkSe
DSGKxVtUtA5VRadQVfYIlVe/UCWgEu+GhMp7VKgS8Q5VE0J1Z1qonqEK1XOY
M+C5KFQ1y5hZHSqfNaFKQg1qNzBnGirfraFKRi3e72B2X6j89ocqBe9Rd5gM
a54nQ1V/ltnLofK/EqpU1KPhBrMuoQpwDVUaGtDozWxAqAIDQ5WORjQ9JCOa
Z0yomhOZTQtVcHqoMtGMllxmi0IVUhyqLLRA75itD1VoQ6iyocZQtep8X8PQ
uv99DccHo+9rBNpMv6/P0Nbwvj5Hu7X3NRLtze5rFD60vK/R6GBzX2PQ8ep9
jUUnt/sah85B9/UFusTeV9eM++pWcl//aLyv7p0faAJ69H+gL/HR6AeaiJ7T
H6iX4QNNRu+1DzQFfcwe6Ct8bPlAn9g80FT0vfpA09DP7YGmo3/QAw2IfaCZ
GJjxQLMwqOSBvsH/NT7Q4M4PNaT/Q306+qGGTn+oVoYPNQyt1z7UcHxg9lAj
0MbyoT5DW5uH+hztrj7USLR3e6hR+DDooUajQ+xDjUHHjIcai04lDzUOnRsf
6guM7/xI3fs/0gT0GP1IX+Kj6Y80EZMMH6nX2keajN5mjzQFfSwf6St8bfNI
n1x9pKno6/ZI09Av6JGmY0bsIw3IeKSZGFjySLMwqPGRvkGrNmGa3TlMG9G6
Z5ha9Q/THGzCB0OpjQ7Tt9iMNhOpTQ/TXPyMtnPDNM8wTFvQ7gfua8M0H6Zo
/xM1szAtwFZ8uJOaZZi+gxk6HAnTQpswmaPjOe5Xw2QAC3S6Sc0tTIuwDZ3v
UgsKkyF+QZewMBnFhqnrc84ZYVqMbq+5l4RpCf5Rxb0xTP9E9zbh/E3DtRQ7
0KNnOH/fcP6+4VqGX/HRUOqjw/lbh+t77ETPidSnh/N3D9cP6DU3nL9/uJZj
N3r/QG1tOL9FuFZgD/r8RN0snN8lXCvxGz7eSd0ynN8oXP/CJ0fC+a3CtQr7
0Pcctavh/G7hWo396HeTuls4v2G41sAS/e9SDwrn9wzXWgwIC+d3DZcxrDDw
ObWMcH7jcJngIAa9pl4Szu8drnX4Hf9XRb0xnN8+XP/G4DYRWt85QkN6Rmhw
/whtwKdDuY+O0I8YOpH79Aj9hGFzIzTbMEIbMfwH7msjNAebMOInamYR+hab
8dlOapYRmouf8fmRCM2zidAWjDzH/WqE5sMUo25Sc4vQAmzF6LvUgiL0Hcww
JixCC2MjZI6xz7lnRMgAFhj3mlpJhBZhG76ootYYIUP8gvFtIrW9c6Qm9IzU
+P6RWood+HIotdGRWoZfMXEitemR+h47MWlupHYZRmryD5zXRmo5dmPKT9TM
IrUCe/DVTmqWkVqJ3/D1kUjttYnU1HOcr0ZqFfZh2k1qbpFajf2YfpdaUKTW
wBIzwiJ1IDZSM59zzoiUMaww6zW1kkiZ4CC+qaLWGKl1+B2z2zzWoc6P5YA5
PR9rdv/HOgxHfDuU2ujH+gNOmDuR2vTHOoJbmDf3sY4aPpYz5v/Afe1jHYML
FvxEzeyxjsMV3+2kZvlYf8INC4881gmbx3KHwTnuVx/LGh5YdJOa22OdhCcM
71ILeiwb3IZR2GPZxj7W4uecMx7rFJa85l7yWKfxzyrujY/1HyxtE8XvF6Uz
8MaynlH8hlH8hlE6izv4fij10VH8jlH6C3fxw0Tq06P4LaN0DsvnRvF7Ruk8
fLHiB2pro/hNo3QBflj5E3WzKH7XKF3EPfxrJ3XLKH7bKP0Xq45E8ftG6RIC
sPoctatR/MZRuoxArLlJ3S2K3zlKVxCEtXepB0XxW0fpKozDovi9o2SHEJg8
p5YRxW8eJXuEYt1r6iVR/O5Ruob7+HcV9cYofvso/Q/r20TreudobegZrfX9
o3UDPw7lPjpaf+OnidynR+smNs6N1iHDaDlg0w/c10brMByx+SdqZtH6A074
eSc1y2gdwS1sORKtozbRcobpOe5Xo3UMLth6k5pbtI7DFWZ3qQVF60+4wTws
Widio+UOi+fcM6JlDQ9se02tJFon4Ylfqqg1RssGt7G9TYy8OsdoR88Ybe8f
ozPwxq9DqY2O0Vncwc6J1KbH6C/cxa65MfIxjNHuHzivjdF5+GLPT9TMYnQB
fvhtJzXLGF3EPew9EiN/mxjtO8f5aowuIQD7b1Jzi9FlBMLyLrWgGF1BEA6E
xSg4NkZWzzlnxMgOITj4mlpJjOwRit+rqDXG6Bru41CbWD3oHKs8HO4Zq0P9
Y/UQ+fhjKLXRsXqEAhyZSG16rMLwBkfnxircMFaFOPYD97WxikARjv9EzSxW
kSjGnzupWcbqMUpw4kisomxiVQrrc9yvxioaZTh5k5pbrGJQDpu71IJiFYu3
sA2LVVxsrE4955wRq3icfs29JFZP8J8q7o2xeoozbeL4/eKUgEqc7RnHbxjH
bxinRLzDX0Opj47jd4zTM1Th3ETq0+P4LeP0HOfnxvF7xikJNbjwA7W1cfym
cUpGLS7+RN0sjt81Til4j//upG4Zx28bpxe4dCSO3zdOqajH5XPUrsbxG8cp
DQ24cpO6Wxy/c5zS0Yird6kHxfFbxykDdmFx/N5xykQz7J9Ty4jjN49TFlpw
7TX1kjh+9zhlQ6Vx+l8V9cY4fvs4vcT1NvHK6RyvGz3jdb1/vHLx91Duo+P1
Cjcncp8er9dwmBuvB4bxyoPjD9zXxush8uH0EzWzeD1CAW7tpGYZrzC8gfOR
eIXbxKsQLue4X41XBIrgepOaW7wiUQy3u9SC4vUYJXAPi1dUbLxK4fGce0a8
olEGz9fUSuIVg3LcrqLWGK9YvIVXmyeq6PxE3j2fyKv/EyWgEneGUhv9RIl4
h7sTqU1/omeogs/cJ6o2fCLfHzivfaIk1MDvJ2pmT5SMWtzbSc3yiVLwHv5H
nqjO5okCznG++kSpqEfgTWpuT5SGBgTdpRb0ROloRHDYEzXFPlHIc84ZT5SJ
ZoS+plbyRFlowf0qao1PlA01PeH74KladXmqYRjS/6laD3iq4fh09FN9MOap
RmDo9KdqM+OpPkMrQ95FW6On+hyt1/I+2hk/1Uh8YMYM2ps/1Si0sWQOHx54
qtFoa8McOtg+1Ri0u8ocOto91Vi0d2MOndyfahw+DGIOnYOf6gt0iGUOXeKY
yWAGXTN5v4T30a2Udxt5F/9oeqruXRI0AT0GJOhLfDQmQRPRc0aCuhsmqJdR
giajx9oE9TZO0BR8ZJagPuYJ+go9LRP08QHes0nQJ7YJmoreVxPU1y5B09DH
LUH93BM0HR8HJah/MO/FJmhAXIJmom9GggZmJmgW+pUkaFBpgr5B/8YE/V9T
ggZ3SdSQAYn6dEyihs5I1GDDRLUyStQwDFmbqNbGiRqOT80S9YF5okZgqGWi
2hxI1GcYZpOotraJ+hzDryaqnV2iRmKEW6LauydqFD4LStSHwYkajc9jE9Uh
LlFjMDIjUR0zEzUWo0oS1ak0UeMwujFRnZsS9QXGd3mm7gOeaQJ6jHmmL/HR
jGeaiPGGzzTJiN7aZ+pl/EyT8aXZM/U2f6YpmGj5TH0OPNNXmGTzTF/b8s7V
Z/rE7pmmYorbM/V1f6Zp+CromfoFP9N0fB37TDPieCfjmQZkPtNMTCt5poGl
zzQL0xufaVDTM32DVm2f8///55rd5bk2onWv53wDPFerAc81B5vwwbDnfAvQ
G/Nc32Iz2kx6zjcBvRnPNRc/o+08cgzJwTyj59qCdsvJWUsO2ho/13yYov1G
sszIQjvz51qArfhwF3mW5KH9gef6DmbocJRMGzKx0Pa5zNHxPHlXyUMHu+cy
gAU6OZDnRh46uj/XImxDZx/ygshDp+DnMsQv6BJOZiyZMIp7rq5JZGWQhS6Z
z7UY3fLIKSEHXUufawn+UU1GIxno1vRc/0T3tkn85klaih3o0SuJ3z+J3z9J
y/ArPhpGfUwSu5Ck77ETPSdRn5HEXiTpB/SaR4ZhEvuRpOXYjd7LyVhLzziJ
XUnSCuxBn43kmNE3T2JvkrQSv+HjXWRZ0j+QxA4l6V/45Ch5NknsUpJWYR/6
nifrKj27JPYqSauxH/0cyHKj757EjiVpDSzR34esIPrBSexbktZiQDh5sUns
XZKMYYWBSWRl0MtMYgeTZIKDGJRHVgn90iT2MUnr8Dv+r5qsRvpNSexmkv6N
wW2Ttb5Lsob0StbgAcnagE+HcR+TrB8xdBL3Gcn6CcPm8a5hsmYbJWsjhi/n
/bXUjZM1B5swYiNzZvTMk/UtNuOzXcxb0juQrLn4GZ8fJcMmWfNsk7UFI88z
f5W6XbLmwxSjHJh3o+eerAXYitE+zAfRC07WdzDDmHAyYpO1MC5Z5hibxHwG
9cxkGcAC4/KYL6FXmqxF2IYvqplvpNeULEP8gvFtU7S9S4om9ErR+AEpWood
+HIYtTEpWoZfMXEStRkp+h47MWkec4Yp2mWUosnLmVlLzThFy7EbUzYyZ0bP
PEUrsAdf7WLWkt6BFK3Eb/j6KBk2Kdprm6Kp55m9Ss0uRauwD9McmHWj556i
1diP6T7MBtELTtEaWGJGOBmxKToQl6KZScxmUMtMkTGsMCuP2RJ6pSkywUF8
U81sI72mFK3D75jd9gXfPy90qMsLOWBOrxd8A73Q7AEvdBiO+HbYC76F6I15
oT/ghLmTXvBNRG/GCx3BLcybR44hOThq9ELOmL+cnLXkYJ7xCx2DCxZsJMuM
LMw3f6HjcMV3u8izJA8LDrzQn3DDwqNk2pCJE7Yv5A6D8+RdJQ8L7V7IGh5Y
5ECeG3kwcH+hk/CEoQ95QeRhUfAL2eA2jMLJjCUTtnEvtDiJrAyyYJT5Qqew
JI+cEnKwuPSFTuOf1WQ0koElTS/0Hyxtm8p+peoMvLGsVyo7lsqOpeos7uD7
YdTHpLJnqfoLd/HDJOozUtm1VJ3D8nlkGKayb6k6D1+sWE7GWnrGqexcqi7A
Dys3kmNG3zyVvUvVRdzDv3aRZUn/QCq7l6r/YtVR8mxS2b9UXUIAVp8n6yo9
u1R2MFWXEYg1DmS50XdPZQ9TdQVBWOtDVhD94FR2MVVXYRxOXmwq+5gqO4TA
JImsDHqZqexkquwRinV5ZJXQL01lL1N1Dffx72qyGuk3pbKbqfof1rdN0/Uu
adrQK03rB6TpBn4cxn1Mmv7GT5O4z0jTTWycx7uGaTpklCYHbFrO+2upG6fp
MByxeSNzZvTM0/QHnPDzLuYt6R1I0xHcwpajZNik6ahtmpxhep75q9Tt0nQM
LtjqwLwbPfc0HYcrzHyYD6IXnKY/4QbzcDJi03QiLk3usEhiPoN6Zpqs4YFt
ecyX0CtN00l44pdq5hvpNaXJBrexvW26vLqka0evdG0fkK4z8Mavw6iNSddZ
3MHOSdRmpOsv3MWuecwZpsvHKF27lzOzlppxus7DF3s2MmdGzzxdF+CH33Yx
a0nvQLou4h72HiXDJl3+tunad57Zq9Ts0nUJAdjvwKwbPfd0XUYgLH2YDaIX
nK4rCMKBcDJi0xUcly6rJGYzqGWmyw4hOJjHbAm90nTZIxS/VzPbSK8pXddw
H4faZvD9l6EHXTKUh8O9MvgGzNChARl6iHz8MSyDb0F6YzL0CAU4MimDb0J6
MzIUhjc4Oo8cQ3IQbpShQhxbTs5acnDUOEMRKMLxjWSZkYVj5hmKRDH+3EWe
JXk4fiBDj1GCE0fJtCETUbYZKoX1efKukocTdhmKRhlOOpDnRh6s3TMUg3LY
+JAXRB5OBmcoFm9hG05mLJmIi8vQqSSyMsiCbWaG4nE6j5wScnCqNENP8J9q
MhrJwOmmDD3FmbaZ7FemElCJs70y2bFMdixTiXiHv4ZRH5PJnmXqGapwbhL1
GZnsWqae4/w8Mgwz2bdMJaEGF5aTsZaecSY7l6lk1OLiRnLM6JtnsneZSsF7
/HcXWZb0D2Sye5l6gUtHybPJZP8ylYp6XD5P1lV6dpnsYKbS0IArDmS50XfP
ZA8zlY5GXPUhK4h+cCa7mKkM2IWTF5vJPmYqE82wTyIrg15mJjuZqSy04Foe
WSX0SzPZy0xlQ2WZ+l81WY30mzLZzUy9xPW2WcrpkqUbvbJ0fUCWcvH3MO5j
svQKNydxn5Gl13CYx7uGWXpglKU8OC7n/bXUjbP0EPlw2sicGT3zLD1CAW7t
Yt6S3oEsheENnI+SYZOlcNssFcLlPPNXqdtlKQJFcHVg3o2ee5YiUQw3H+aD
6AVn6TFK4B5ORmyWouKyVAqPJOYzqGdmKRpl8MxjvoReaZZiUI7b1cw30mvK
Uizewqtttiq6ZMu7V7a8BmQrAZW4M4zamGwl4h3uTqI2I1vPUAWfecwZZqva
KFu+y5lZS804W0mogd9G5szomWcrGbW4t4tZS3oHspWC9/A/SoZNtupssxVw
ntmr1OyylYp6BDow60bPPVtpaECQD7NB9IKzlY5GBIeTEZutprhshSQxm0Et
M1uZaEZoHrMl9EqzlYUW3K9mtpFeU7ayoeZsvr9fqlXXlxqGIQNeqvXAlxqO
T8e81AdjX2oEhs54qTYzX+oztDLiXbRd/FKfo7Ux76OdyUuNxAfmzKC9xUuN
QpsDzOFDq5cajba2zKHDqZcag3Z2zKGj/UuNRXt35tDJ46XG4cNg5tA55KW+
QIc45tAlnplMZtA1i/dLeR/dyni3iXfxj+aX6t41RxPQY2COvsRHY3M0ET1n
5qi7UY56Lc7RZPQwzlFvkxxNwUfmOepjkaOv0PNAjj624j3bHH1yKkdT0dsu
R33tczQNfdxz1M8jR9PxcXCO+ofwXlyOBsTnaCb6ZuZoYFaOZqFfaY4GleXo
G/RvytH/NedocNdcDRmYq0/H5mrozFwNNspVq8W5GoYhxrlqbZKr4fjUPFcf
WORqBIYeyFUbq1x9hmG2uWp7KlefY7hdrtrZ52okRrjnqr1Hrkbhs+BcfRiS
q9H4PC5XHeJzNQYjM3PVMStXYzGqNFedynI1DqObctW5OVdfYHzXV+o+8JUm
oMfYV/oSH818pYkYb/RKkxbTM36lXiavNBlfmr9Sb4tXmoKJB16pj9UrfYVJ
tq/09SnesXulT+xfaSqmuL9SX49Xmoavgl+pX8grTcfXca80I553Ml9pQNYr
zcS00lcaWPZKszC96ZUGNb/SN2jV7jXfl681u+trbUTr3q/5xnytVgNfaw42
4YPhr/nWpDf2tb7FZrSZ/JpvTnozX2sufkbb+eQYkYN5i19rC9qtIMeYHLQ1
ea35MEX7TWSZk4V2Fq+1AFvx4W7yDpCH9lav9R3M0OEYmbZkYuGp1zJHxwvk
2ZGHDvavZQALdHIkz508dPR4rUXYhs6+5AWTh04hr2WIX9Algsw4MmEU/1pd
k8nKJAtdsl5rMbrlk1NKDrqWvdYS/KOGjCYy0K35tf6J7u3y+M3ztBQ70KN3
Hr9/Hr9/npbhV3w0nPrYPHYhT99jJ3pOpj4zj73I0w/oNZ8Mozz2I0/LsRu9
V5BhTM8kj13J0wrsQZ9N5JjTt8hjb/K0Er/h491kHaBvlccO5elf+OQYebZ5
7FKeVmEf+l4gy46efR57lafV2I9+jmS50/fIY8fytAaW6O9LVjD9kDz2LU9r
MSCCvLg89i5PxrDCwGSyMull5bGDeTLBQQzKJ6uUflke+5indfgd/1dDVhP9
5jx2M0//xuB2+VrfNV9Deudr8MB8bcCnw7mPzdePGDqZ+8x8/YRh83nXKF+z
F+drI4av4H1j6ib5moNNGLGJOXN6Fvn6Fpvx2W7mD9Czytdc/IzPj5Fhm695
p/K1BSMvMG9H3T5f82GKUY7Mu9PzyNcCbMVoX+aD6YXk6zuYYUwEGXH5Whif
L3OMTWY+k3pWvgxggXH5zJfSK8vXImzDFzXMN9FrzpchfsH4dgXa3rVAE3oX
aPzAAi3FDnw5nNrYAi3Dr5g4mdrMAn2PnZg0nzmjAu1aXKDJK5gxpmZSoOXY
jSmbmDOnZ1GgFdiDr3Yze4CeVYFW4jd8fYwM2wLtPVWgqReYtaNmX6BV2Idp
jsy60/Mo0Grsx3RfZoPphRRoDSwxI4KMuAIdiC/QzGRmM6llFcgYVpiVz2wp
vbICmeAgvqlhtolec4HW4XfMbveG78s3OtT1jRwwp/cbvjHfaPbANzoMR3w7
/A3fmvTGvtEfcMLcyW/45qQ3842O4BbmzSfHiBwcXfxGzpi/ghxjcjDP5I2O
wQULNpFlThbmW7zRcbjiu93kHSAPC6ze6E+4YeExMm3JxIlTb+QOgwvk2ZGH
hfZvZA0PLHIkz508GHi80Ul4wtCXvGDysCjkjWxwG0YRZMaRCdv4N1qcTFYm
WTDKeqNTWJJPTik5WFz2RqfxzxoymsjAkuY3+g+Wtitkvwp1Bt5Y1ruQHStk
xwp1Fnfw/XDqYwvZs0L9hbv4YTL1mYXsWqHOYfl8MowK2bdCnYcvVqwgw5ie
SSE7V6gL8MPKTeSY07coZO8KdRH38K/dZB2gb1XI7hXqv1h1jDzbQvavUJcQ
gNUXyLKjZ1/IDhbqMgKxxpEsd/oehexhoa4gCGt9yQqmH1LILhbqKowjyIsr
ZB8LZYcQmCSTlUkvq5CdLJQ9QrEun6xS+mWF7GWhruE+/l1DVhP95kJ2s1D/
w/p2RbretUgbehdp/cAi3cCPw7mPLdLf+Gky95lFuomN83nXqEiHFhfJAZtW
8L4xdZMiHYYjNm9izpyeRZH+gBN+3s38AXpWRTqCW9hyjAzbIh09VSRnmF5g
3o66fZGOwQVbHZl3p+dRpONwhZkv88H0Qor0J9xgHkFGXJFOxBfJHRbJzGdS
zyqSNTywLZ/5UnplRToJT/xSw3wTveYi2eA2trcrllfXYu3oXaztA4t1Bt74
dTi1scU6izvYOZnazGL9hbvYNZ85o2L5LC7W7hXMGFMzKdZ5+GLPJubM6VkU
6wL88NtuZg/QsyrWRdzD3mNk2BbL/1Sx9l1g1o6afbEuIQD7HZl1p+dRrMsI
hKUvs8H0Qop1BUE4EEFGXLGC44tllcxsJrWsYtkhBAfzmS2lV1Yse4Ti9xpm
m+g1F+sa7uNQuxK+L0v0oGuJ8nC4dwnfmCU6NLBED5GPP4aX8K1Jb2yJHqEA
RyaX8M1Jb2aJwvAGR+eTY0QOwheXqBDHVpBjTA6OmpQoAkU4voksc7JwzKJE
kSjGn7vJO0AejluV6DFKcOIYmbZkIupUiUphfYE8O/Jwwr5E0SjDSUfy3MmD
tUeJYlAOG1/ygsnDyZASxeItbCPIjCMTcfElOpVMViZZsM0qUTxO55NTSg5O
lZXoCf5TQ0YTGTjdXKKnONOulP0qVQIqcbZ3KTtWyo6VKhHv8Ndw6mNL2bNS
PUMVzk2mPrOUXSvVc5yfT4ZRKftWqiTU4MIKMozpmZSyc6VKRi0ubiLHnL5F
KXtXqhS8x393k3WAvlUpu1eqF7h0jDzbUvavVKmox+ULZNnRsy9lB0uVhgZc
cSTLnb5HKXtYqnQ04qovWcH0Q0rZxVJlwC6CvLhS9rFUmWiGfTJZmfSyStnJ
UmWhBdfyySqlX1bKXpYqG/xh9b8asproN5eym6V6ievtypTTtUw3epfp+sAy
5eLv4dzHlukVbk7mPrNMr+Ewn3eNyvRgcZny4LiC942pm5TpIfLhtIk5c3oW
ZXqEAtzazfwBelZlCsMbOB8jw7ZM4afKVAiXC8zbUbcvUwSK4OrIvDs9jzJF
ohhuvswH0wsp02OUwD2CjLgyRcWXqRQeycxnUs8qUzTK4JnPfCm9sjLFoBy3
a5hvotdcpli8hVe7clV0LZd373J5DSxXAipxZzi1seVKxDvcnUxtZrmeoQo+
85kzKlf14nL5rmDGmJpJuZJQA79NzJnTsyhXMmpxbzezB+hZlSsF7+F/jAzb
ctWdKlfABWbtqNmXKxX1CHRk1p2eR7nS0IAgX2aD6YWUKx2NCI4gI65cTfHl
CklmNpNaVrky0YzQfGZL6ZWVKwstuF/DbBO95nJlQy3lfH+/VatubzUMQwa+
VetBbzUcn459qw/GvdUIDJ35Vm1mvdVnaLWYd9F2yVt9jtYmvI92695qJD6w
YAbtt73VKLSxYg4fHnyr0Wh7ijl0OP1WY9DOnjl0vPZWY9Hegzl08nyrcfgw
hDl0Dn2rL9Ahnjl0ecJMFjPoms37ZbyPbuW828y7+EfLW3XvVqEJ6DGoQl/i
o3EVmoiesyrUfXGFei2p0GT0MKlQ73UVmoKPLCrUZ1uFvkJPqwp9fJD3TlXo
k9MVmore9hXqe61C09DHo0L9PCs0HR+HVKh/KO/FV2jAkwrNRN+sCg3MrtAs
9Cur0KDyCn2D/s0V+r+WCg3uVqkhgyr16bhKDZ1VqcGLK9VqSaWGYYhJpVqv
q9RwfGpRqQ+2VWoEhlpVqs3BSn2GYacq1fZ0pT7HcPtKtbtWqZEY4VGp9p6V
GoXPQir1YWilRuPz+Ep1eFKpMRiZVamO2ZUai1FllepUXqlxGN1cqc4tlfoC
47u9U/dB7zQBPca905f4aNY7TcT4xe80aQk9k3fqte6dJuNLi3fqve2dpmCi
1Tv1OfhOX2HSqXf6+jTv2L/TJ9feaSqmeLxTX893moavQt6pX+g7TcfX8e80
4wnvZL3TgOx3molpZe80sPydZmF68zsNanmnb9CqfRXfl1Wa3a1KG9G6TxXf
mFVqNahKc7AJH4yo4luT3rgqfYvNaDOlim9OerOqNBc/o+0CchaTg3lLqrQF
7VaSY0IO2q6r0nyYov1msizIQrttVVqArfhwD3lW5KH9wSp9BzN0OE7mKTKx
8HSVzNHxInn25KHDtSoZwAKdnMjzIA8dPau0CNvQ2Y+8EPLQKbRKhvgFXSLJ
jCcTRk+q1DWFrCyy0CW7SovRrYCcMnLQtbxKS/CPWjKayUC3lir9E93bV/Ob
V2spdqBHn2p+/2p+/2otw6/4aAT1cdXsQrW+x070nEJ9VjV7Ua0f0GsBGYur
2Y9qLcdu9F5Jhgm9ddXsSrVWYA/6bCbHgv62avamWivxGz7eQ5YV/YPV7FC1
/oVPjpN3qppdqtYq7EPfi2TZ07tWzV5VazX2o58TWR70PavZsWqtgSX6+5EV
Qj+0mn2r1loMiCQvvpq9q5YxrDAwhawsetnV7GC1THAQgwrIKqNfXs0+Vmsd
fsf/1ZLVTL+lmt2s1r8xuH2N1ner0ZA+NRo8qEYb8OkI7uNq9COGTuE+q0Y/
YdgC3l1co9lLarQRw1fyvgn1dTWag00YsZk5C3rbavQtNuOzPcxb0TtYo7n4
GZ8fJ+NUjeadrtEWjLzIvD31azWaD1OMcmLeg55njRZgK0b7MR9CL7RG38EM
YyLJiK/Rwic1MsfYFOazqGfXyAAWGFfAfBm98hotwjZ8Uct8M72WGhniF4xv
X6vt3Wo1oU+txg+q1VLswJcjqI2r1TL8iolTqM2q1ffYiUkLmFtcq11LajV5
JTMm1NbVajl2Y8pm5izobavVCuzBV3uYtaJ3sFYr8Ru+Pk7GqVrtPV2rqReZ
tad2rVarsA/TnJj1oOdZq9XYj+l+zIbQC63VGlhiRiQZ8bU68KRWM1OYzaKW
XStjWGFWAbNl9MprZYKD+KaW2WZ6LbVah98xu/17vi/f61C393LAnD7v+cZ8
r9mD3uswHPHtiPd8a9Ib915/wAlzp7znm5PerPc6gluYt4CcxeTg6JL3csb8
leSYkIN5697rGFywYDNZFmRh/rb3Og5XfLeHPCvysODge/0JNyw8TuYpMnHi
9Hu5w+AiefbkYeG197KGBxY5kedBHgw83+skPGHoR14IeVgU+l42uA2jSDLj
yYTtk/danEJWFlkwyn6vU1hSQE4ZOVhc/l6n8c9aMprJwJKW9/oPlravY7/q
dAbeWNanjh2rY8fqdBZ38P0I6uPq2LM6/YW7+GEK9Vl17FqdzmH5AjIW17Fv
dToPX6xYSYYJvXV17FydLsAPKzeTY0F/Wx17V6eLuId/7SHLiv7BOnavTv/F
quPknapj/+p0CQFYfZEse3rX6tjBOl1GINY4keVB37OOPazTFQRhrR9ZIfRD
69jFOl2FcSR58XXsY53sEAKTFLKy6GXXsZN1skco1hWQVUa/vI69rNM13Me/
a8lqpt9Sx27W6X9Y375e17vVa0Ofeq0fVK8b+HEE93H1+hs/TeE+q143sXEB
7y6u16El9XLAppW8b0J9Xb0OwxGbNzNnQW9bvf6AE37ew7wVvYP1OoJb2HKc
jFP1Onq6Xs4wvci8PfVr9ToGF2x1Yt6Dnme9jsMVZn7Mh9ALrdefcIN5JBnx
9TrxpF7usEhhPot6dr2s4YFtBcyX0Suv10l44pda5pvptdTLBrexvX2DvLo1
aEefBm0f1KAz8MavI6iNa9BZ3MHOKdRmNegv3MWuBcwtbpDPkgbtXsmMCbV1
DToPX+zZzJwFvW0NugA//LaHWSt6Bxt0Efew9zgZpxrkf7pB+y4ya0/tWoMu
IQD7nZj1oOfZoMsIhKUfsyH0Qht0BUE4EElGfIOCnzTIKoXZLGrZDbJDCA4W
MFtGr7xB9gjF77XMNtNradA13Meh9o18XzbqQbdG5eFwn0a+MRt1aFCjHiIf
f4xo5FuT3rhGPUIBjkxp5JuT3qxGheENji4gZzE5CF/SqEIcW0mOCTk4uq5R
ESjC8c1kWZCFY9saFYli/LmHPCvycPxgox6jBCeOk3mKTESdblQprC+SZ08e
TlxrVDTKcNKJPA/yYO3ZqBiUw8aPvBDycDK0UbF4C9tIMuPJRNyTRp1KISuL
LNhmNyoepwvIKSMHp8ob9QT/qSWjmQycbmnUU5xp38R+NSkBlTjbp4kda2LH
mpSId/hrBPVxTexZk56hCuemUJ/VxK416TnOLyBjcRP71qQk1ODCSjJM6K1r
YuealIxaXNxMjgX9bU3sXZNS8B7/3UOWFf2DTexek17g0nHyTjWxf01KRT0u
XyTLnt61JnawSWlowBUnsjzoezaxh01KRyOu+pEVQj+0iV1sUgbsIsmLb2If
m5SJZtinkJVFL7uJnWxSFlpwrYCsMvrlTexlk7Kht036Xy1ZzfRbmtjNJr3E
9fbNyunWrBt9mnV9ULNy8fcI7uOa9Qo3p3Cf1azXcFjAu4ub9WBJs/LguJL3
Taiva9ZD5MNpM3MW9LY16xEKcGsP81b0DjYrDG/gfJyMU80KP92sQrhcZN6e
+rVmRaAIrk7Me9DzbFYkiuHmx3wIvdBmPUYJ3CPJiG9W1JNmlcIjhfks6tnN
ikYZPAuYL6NX3qwYlON2LfPN9FqaFYu38GrfoopuLfLu0yKvQS1KQCXujKA2
rkWJeIe7U6jNatEzVMFnAXOLW1S9pEW+K5kxobauRUmogd9m5izobWtRMmpx
bw+zVvQOtigF7+F/nIxTLao73aKAi8zaU7vWolTUI9CJWQ96ni1KQwOC/JgN
oRfaonQ0IjiSjPgWNT1pUUgKs1nUsluUiWaEFjBbRq+8RVlowf1aZpvptbQo
G/xr9f9ERP5m
     "]}, {
    False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895718154486341*^9},
 CellLabel->
  "Out[210]=",ExpressionUUID->"32861cdd-1998-4258-8040-fc7d0e755adb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aux2", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8957181750326967`*^9, 3.8957181893292913`*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"8a7ceab3-bd05-45d4-b3f0-56501b9caed9"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8957181801050797`*^9, 3.895718189606668*^9}},
 CellLabel->
  "Out[213]=",ExpressionUUID->"6928201e-646e-411b-a381-cf93fd6fdaa5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"aux22", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"aux2", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "/.", 
       RowBox[{"False", "->", "0"}]}], "/.", 
      RowBox[{"True", "->", "1"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "@", "aux2"}]}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.895647946595086*^9, 3.895647970440576*^9}, {
  3.895715774604998*^9, 3.8957157792830257`*^9}, {3.895715814405651*^9, 
  3.895715814776381*^9}, {3.8957181341381817`*^9, 3.895718152812725*^9}, {
  3.895718193493012*^9, 3.895718233249277*^9}},
 CellLabel->
  "In[214]:=",ExpressionUUID->"b874e5de-ad8c-493c-adbe-150430558bd2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["18432", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "16777216", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], Frame -> False, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameLabel -> {None, None}, 
             FrameTicks -> {{None, None}, {None, None}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["18432", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "16777216", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.0010986328125`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", "1", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "False", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "37", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "False", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "2081", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "False", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", "2305", "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "False", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[Automatic, {16777216}, True, {1, {{0, 18432}, CompressedData["
1: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
vrk1Sv+GbvN8n3w4Sh5Go2VkPFo+8LBmbTNanvajZewwWr7wdGXtNlpeHqNl
4jlafvAKYB04Wt6ho2UaNlpj4B3DOpb9iXTBLGm0/GGUxTPMsunJoxPm+aMV
AONCnmFeRF8x3bAoGa1AmJTxDItyehdwBiwrRisIppU8w7KK3mrOgVXNaAXD
rI5nWNXTu55zYL1htEJg3sgzrJvobeYc2LSM1lhYtPEMm3Z6d3MObDtGaxws
O3mGbRe9hzgHdodZd7OGXQ+dpzgDg06zvsAagy7S10s/Bl9h3c8agwfoukU3
htxm/YA1hjwcLXtjD4XB3sZDDg4eCoeDm4ccPT0UAcdADw0NQyzfJHrIKclD
UbDPYp3Nt3kecs730Hg4FLIuYk+xh4aVeGgCHMtYl7N/gYeGV5CVZBV7qz3k
UuOhGDjVsa5n73oPuW7wUCycG1k3sbfZQ24tHorDsDbW7ezf7aERHWQn2cXe
Qx5yP+yhiXDpZt3D3lMeGnnaQ5PgeoH1Rfb2emjUFQ8lwK2f9QD7b3lo9G3y
AfnQQx7GnvKw8ZSnA9w85eWJQE95hyGW3xI9ZZTkKR94ZJHZfJfnKeN8T/nC
s5AsYk+xp0xKPOUHrzKynP0LPGVa4akx8K4kq9hf7SmzGk/5w6eOrGf/ek+Z
b/BUAHwbySb2N3vKosVTgfBrI9vZv9tTlh2eCsKYTrKL/Yc8ZXXYU8Hw7yZ7
2H/KU9anPRWCgAvkRfb3esrmiqfGIrCfHGD/LU/Z3vbUOAQ9IB96KtTYS6E2
XrJ38FKYgZuXHDy9FG4Q6CXHMC9FGMTyXaKXIpPILDKbb/O85JTvpSiEFZJF
7Cn2knOJl8YjvIwsZ+8CLw2r8NIERFSSVeyv9lJ0DVlH1rN3vZdcNngpBlGN
ZBN7m73k2uKlWIxvI9vZu9tLbh1eisOETrKL/Ye8FH+Y7CZ72HvKS+6nvTQR
MRfIi+zt9dLIK16ahNh+coC9t7w06raXEhD3gHzopWIjbyUae+sZFFuztvFW
ib23jBy8lYRnUeLK2s1bsz28ZezprWQ8h9kBrAO9NSfUWyZh3krBXMyJYR1L
VyK9SE3yVikSs3hGajZ9eXTDLN9baShDUiHvkFZEbzFnwLzEW+koR3IZ75Be
Tv8CzoJFhbcyMA8plbxDRhVnVHMmMmu89TxS63hGZj396zkPVhu8lYUXkNbI
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
zhCuKqdw1aERTzy5N4ar2hSuS3iKxjD6zOHabwnXZTzD02Rq08P1PIP73HAd
yAvXVfyD56Xcl4frYEW4fsS/+GcnfVXhOlQdrp/wH/49Qu2JcL2o5b4uXIcv
hesaXuLFde5vh+tIfbiu4xVePqDvSbiONobrBvSU31+Gq3fzCDVpEaE+mNI+
Qu92jtBrXSLUF016RegTvNc3Qk37RagfXhsaoal4f1SEXh8dof5oOilC09DE
mhw0mx6hAbCaS70TWWjuHKGBaOYVIWs0NZGHFgERGoTm4RGajtctZKJlbIQ+
QIuUCNmgWQaZaJUZocGYsYKePDLROj9CQ9CqLEIz0aKCTLTZEqGhaL0rQrPQ
sppMvLE/QsPQ5miEPkWrWjLR9mSEZp+j/hJ5aHeZ325EaA7a1JOF9nf4/WGE
5uKNRnLQ4Sm/v4qQLTq2iNSHGN4+UnZ4s0ukRqBjL36HPd7qF6mP8OZQ7uCA
/43m90n8Dkd0tI5Up+mRGoWRcyNlwJtOkersHKnR6OTFHZzwlilSXQIiNQad
w7mHM/5niVTXWO5SuIMLOmVEqltmpMZh7IpIuaJzXqS650dqPLqVcQc3dKmI
1NtbIvUxuu/iHu7oWh2p/9vP3VHuMA/daiPV42SkJmLCuUh5oPulSPW8HKlJ
6HGDO3ji7fpI9boTqcno+ZB7eOH/GiP1zlPuXnEHb/RuESWf9lF6t0uUeveK
ki/e68d5aJT88P5ozpOi5I/e1lFqMj1KfWCcS41TlF5zjlJf9PGKkgnvmaLU
NCBK/dA3PEoBeN8Spddjo9Qf/VKiFIg+GVFqlhmlAQhaQW1elJrnR2kgBpRF
KRj9KqLUYkuUBmHgriiFoH91lFruj9IHGHQ0SvMxoDZKrU5GaTBCz1F7KUqt
L0dpCAbfiFIYBtVHqc2dKA3FkIdRCscHjVF642mUhmHoqyhFYHiLaEW2j1bH
LtH6EMN7RSsKb/aL1gh8ODRa0XhrdLQ+wohJ0YrBcOtojZweLfNcapyi1ck5
WqMw0itaFowwRatzQLRGY1R4tGLxkSVaXWKjNQajU6IVh5EZ0RqbGa34FdTl
RatbfrTGYWxZtBIwuiJa3bdEazzG7YpWIsZUR+vt/dH6GOOPRmsBxtZGa8LJ
aCWdo+5StHpcjtZETLgRrWSMr49WzzvRmoSJD6OVgo8bo9XrabQmY9KraKXC
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
mTt7xhlVeD7enV1zZ9c4I2k2GQvd2TfOqEHyUjJWubNz7uwcd9QiZT05W9zZ
O3f2jjve48V2sva6s3vu7B53pB4i74Q7+8cZ9Ug7Q9Yld3bQnR3kjgakXyfL
2Z09dGcPuaMRGV5k+buzi+7sIndkPiAvyp195IxmZCWQlerOTrqzk9zRguwc
sgrd2Ut39pI7VOyulxVk1bmzm+7sJnfktPJQTkcP5Xb30PW+PPFqsIdujOSJ
1+M99PdUnsibzbsLPfTAgDPyl/L+Kg85rPbQQ+SjYD1zWzzkaOqhRyjAm+3M
7/WQ0z4PheENCg+RccJD4dacUXSG+Usecr7soQgUofg6884ecnHxUCSKUeLF
vL+HXAM89BglKH1ARpSHoqI5oyyB+VQPuad5KBplKM9hvtBDHkUeikE53lYw
X+chz3oPxeItKlp5qqKjpyq7e8qrr6cSUIl3gz3lPdJTiXiHqvGeujPVU89Q
herZzC3kaeCpmqXMrPKUz2pPJaEGteuZ2+IpX1NPJaMW77czu9dTfvs8lYL3
qDtExgme1p6qP8PsJU/5X/ZUKurRcJ1ZZ08FuHgqDQ1o9GLW31OBAZ5KRyOa
HpARxTPaU80JzKZ6KjjNU5loRksOs4WeCinyVBZaoEpm6zwVWu+pbKjBU61a
3+b7/7ZadbqtYWjd47aG9OXZ77aG44Mht/XpSJ6jbmsE2ky4raFTeU67rc/Q
dg6zBsyi7aLb+hztljG/mnm0W3NbI9F+AxmmZKD91tsahQ93kLOPHHy4/7ZG
o8NhcqzJQYeTtzUGHc+Sc5kcdLxyW2PR6QY5LuSgk+ttjUNnb3ICyEHnwNv6
Al0ekhNNDrrE3FbXRDLSyEDX9Nvqlst8EfPoVnxb/6hktp5Z/KPhtrq39lL3
Tl6agB490M9LX+KjIRjlpYnoOQHTvNRrDu8a8FzkpcnovYz3V/Nc46Up6LOB
GVOeW730FT7ewdw+nvu99Mlh5qx5nvTSVPQ9y9xlnle8NA39bjDnwtPVS9PR
35u5AJ6BXhrwkLlonjFemomBicyl8Uz30iwMymWuiGexl77B/1UyV8+zwUuD
W3trcCdvDemBft76dAhGeWvoBEzz1rA59A281WoRZwxfxnurvdV6DWeM2MD7
pt76YCtnfLaDuX3earOfMz4/zJy1t9qe5IyRZ5m77K12Vzhj1A3mXLzV3pUz
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
G/RvytH/NedocNdcDRmYq0/H5mrozFwNNspVq8W5GoYhxrlqbZKr4fjUPFcf
WORqBIYeyFUbq1x9hmG2uWp7KlefY7hdrtrZ52okRrjnqr1Hrkbhs+BcfRiS
q9H4PC5XHeJzNQYjM3PVMStXYzGqNFedynI1DqObctW5OVdfYHzXV+o+8JUm
oMfYV/oSH818pYkYb/RKkxbTM36lXiavNBlfmr9Sb4tXmoKJB16pj9UrfYVJ
tq/09SnesXulT+xfaSqmuL9SX49Xmoavgl+pX8grTcfXca80I553Ml9pQNYr
zcS00lcaWPZKszC96ZUGNb/SN2jV7jXfl681u+trbUTr3q/5xnytVgNfaw42
4YPhr/nWpDf2tb7FZrSZ/JpvTnozX2sufkbb+eQYkYN5i19rC9qtIMeYHLQ1
ea35MEX7TWSZk4V2Fq+1AFvx4W7yDpCH9lav9R3M0OEYmbZkYuGp1zJHxwvk
2ZGHDvavZQALdHIkz508dPR4rUXYhs6+5AWTh04hr2WIX9Algsw4MmEU/1pd
k8nKJAtdsl5rMbrlk1NKDrqWvdYS/KOGjCYy0K35tf6J7u3y+M3ztBQ70KN3
Hr9/Hr9/npbhV3w0nPrYPHYhT99jJ3pOpj4zj73I0w/oNZ8Mozz2I0/LsRu9
V5BhTM8kj13J0wrsQZ9N5JjTt8hjb/K0Er/h491kHaBvlccO5elf+OQYebZ5
7FKeVmEf+l4gy46efR57lafV2I9+jmS50/fIY8fytAaW6O9LVjD9kDz2LU9r
MSCCvLg89i5PxrDCwGSyMull5bGDeTLBQQzKJ6uUflke+5indfgd/1dDVhP9
5jx2M0//xuB2+VrfNV9Deudr8MB8bcCnw7mPzdePGDqZ+8x8/YRh83nXKF+z
F+drI4av4H1j6ib5moNNGLGJOXN6Fvn6Fpvx2W7mD9Czytdc/IzPj5Fhm695
p/K1BSMvMG9H3T5f82GKUY7Mu9PzyNcCbMVoX+aD6YXk6zuYYUwEGXH5Whif
L3OMTWY+k3pWvgxggXH5zJfSK8vXImzDFzXMN9FrzpchfsH4dgXa3rVAE3oX
aPzAAi3FDnw5nNrYAi3Dr5g4mdrMAn2PnZg0nzmjAu1aXKDJK5gxpmZSoOXY
jSmbmDOnZ1GgFdiDr3Yze4CeVYFW4jd8fYwM2wLtPVWgqReYtaNmX6BV2Idp
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
GoXPQir1YWilRuPz+Ep1eFKpMRiZVamO2ZUai1FllepUXqlxGN1cqc4tlfoC
47u9U/dB7zQBPca905f4aNY7TcT4xe80aQk9k3fqte6dJuNLi3fqve2dpmCi
1Tv1OfhOX2HSqXf6+jTv2L/TJ9feaSqmeLxTX893moavQt6pX+g7TcfX8e80
4wnvZL3TgOx3molpZe80sPydZmF68zsNanmnb9CqfRXfl1Wa3a1KG9G6TxXf
mFVqNahKc7AJH4yo4luT3rgqfYvNaDOlim9OerOqNBc/o+0CchaTg3lLqrQF
7VaSY0IO2q6r0nyYov1msizIQrttVVqArfhwD3lW5KH9wSp9BzN0OE7mKTKx
8HSVzNHxInn25KHDtSoZwAKdnMjzIA8dPau0CNvQ2Y+8EPLQKbRKhvgFXSLJ
jCcTRk+q1DWFrCyy0CW7SovRrYCcMnLQtbxKS/CPWjKayUC3lir9E93bV/Ob
V2spdqBHn2p+/2p+/2otw6/4aAT1cdXsQrW+x070nEJ9VjV7Ua0f0GsBGYur
2Y9qLcdu9F5Jhgm9ddXsSrVWYA/6bCbHgv62avamWivxGz7eQ5YV/YPV7FC1
/oVPjpN3qppdqtYq7EPfi2TZ07tWzV5VazX2o58TWR70PavZsWqtgSX6+5EV
Qj+0mn2r1loMiCQvvpq9q5YxrDAwhawsetnV7GC1THAQgwrIKqNfXs0+Vmsd
fsf/1ZLVTL+lmt2s1r8xuH2N1ner0ZA+NRo8qEYb8OkI7uNq9COGTuE+q0Y/
YdgC3l1co9lLarQRw1fyvgn1dTWag00YsZk5C3rbavQtNuOzPcxb0TtYo7n4
GZ8fJ+NUjeadrtEWjLzIvD31azWaD1OMcmLeg55njRZgK0b7MR9CL7RG38EM
YyLJiK/Rwic1MsfYFOazqGfXyAAWGFfAfBm98hotwjZ8Uct8M72WGhniF4xv
X6vt3Wo1oU+txg+q1VLswJcjqI2r1TL8iolTqM2q1ffYiUkLmFtcq11LajV5
JTMm1NbVajl2Y8pm5izobavVCuzBV3uYtaJ3sFYr8Ru+Pk7GqVrtPV2rqReZ
tad2rVarsA/TnJj1oOdZq9XYj+l+zIbQC63VGlhiRiQZ8bU68KRWM1OYzaKW
XStjWGFWAbNl9MprZYKD+KaW2WZ6LbVah98xu/17vi/f61C393LAnD7v+cZ8
r9mD3uswHPHtiPd8a9Ib915/wAlzp7znm5PerPc6gluYt4CcxeTg6JL3csb8
leSYkIN5697rGFywYDNZFmRh/rb3Og5XfLeHPCvysODge/0JNyw8TuYpMnHi
9Hu5w+AiefbkYeG197KGBxY5kedBHgw83+skPGHoR14IeVgU+l42uA2jSDLj
yYTtk/danEJWFlkwyn6vU1hSQE4ZOVhc/l6n8c9aMprJwJKW9/oPlravY7/q
dAbeWNanjh2rY8fqdBZ38P0I6uPq2LM6/YW7+GEK9Vl17FqdzmH5AjIW17Fv
dToPX6xYSYYJvXV17FydLsAPKzeTY0F/Wx17V6eLuId/7SHLiv7BOnavTv/F
quPknapj/+p0CQFYfZEse3rX6tjBOl1GINY4keVB37OOPazTFQRhrR9ZIfRD
69jFOl2FcSR58XXsY53sEAKTFLKy6GXXsZN1skco1hWQVUa/vI69rNM13Me/
a8lqpt9Sx27W6X9Y375e17vVa0Ofeq0fVK8b+HEE93H1+hs/TeE+q143sXEB
7y6u16El9XLAppW8b0J9Xb0OwxGbNzNnQW9bvf6AE37ew7wVvYP1OoJb2HKc
jFP1Onq6Xs4wvci8PfVr9ToGF2x1Yt6Dnme9jsMVZn7Mh9ALrdefcIN5JBnx
9TrxpF7usEhhPot6dr2s4YFtBcyX0Suv10l44pda5pvptdTLBrexvX2DvLo1
aEefBm0f1KAz8MavI6iNa9BZ3MHOKdRmNegv3MWuBcwtbpDPkgbtXsmMCbV1
DToPX+zZzJwFvW0NugA//LaHWSt6Bxt0Efew9zgZpxrkf7pB+y4ya0/tWoMu
IQD7nZj1oOfZoMsIhKUfsyH0Qht0BUE4EElGfIOCnzTIKoXZLGrZDbJDCA4W
MFtGr7xB9gjF77XMNtNradA13Meh9o18XzbqQbdG5eFwn0a+MRt1aFCjHiIf
f4xo5FuT3rhGPUIBjkxp5JuT3qxGheENji4gZzE5CF/SqEIcW0mOCTk4uq5R
ESjC8c1kWZCFY9saFYli/LmHPCvycPxgox6jBCeOk3mKTESdblQprC+SZ08e
TlxrVDTKcNKJPA/yYO3ZqBiUw8aPvBDycDK0UbF4C9tIMuPJRNyTRp1KISuL
LNhmNyoepwvIKSMHp8ob9QT/qSWjmQycbmnUU5xp38R+NSkBlTjbp4kda2LH
mpSId/hrBPVxTexZk56hCuemUJ/VxK416TnOLyBjcRP71qQk1ODCSjJM6K1r
YuealIxaXNxMjgX9bU3sXZNS8B7/3UOWFf2DTexek17g0nHyTjWxf01KRT0u
XyTLnt61JnawSWlowBUnsjzoezaxh01KRyOu+pEVQj+0iV1sUgbsIsmLb2If
m5SJZtinkJVFL7uJnWxSFlpwrYCsMvrlTexlk7Kht036Xy1ZzfRbmtjNJr3E
9fbNyunWrBt9mnV9ULNy8fcI7uOa9Qo3p3Cf1azXcFjAu4ub9WBJs/LguJL3
Taiva9ZD5MNpM3MW9LY16xEKcGsP81b0DjYrDG/gfJyMU80KP92sQrhcZN6e
+rVmRaAIrk7Me9DzbFYkiuHmx3wIvdBmPUYJ3CPJiG9W1JNmlcIjhfks6tnN
ikYZPAuYL6NX3qwYlON2LfPN9FqaFYu38GrfoopuLfLu0yKvQS1KQCXujKA2
rkWJeIe7U6jNatEzVMFnAXOLW1S9pEW+K5kxobauRUmogd9m5izobWtRMmpx
bw+zVvQOtigF7+F/nIxTLao73aKAi8zaU7vWolTUI9CJWQ96ni1KQwOC/JgN
oRfaonQ0IjiSjPgWNT1pUUgKs1nUsluUiWaEFjBbRq+8RVlowf1aZpvptbQo
G/xr9f9ERP5m
     "]}, {
    False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.895647929606256*^9, {3.8956479716397448`*^9, 3.8956479874254723`*^9}, {
   3.895715801422832*^9, 3.895715820606195*^9}},
 CellLabel->
  "Out[119]=",ExpressionUUID->"f25143ce-2452-4811-93f8-f1c665130112"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Head", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "%%"}]}], "Input",
 CellChangeTimes->{{3.895647989895349*^9, 3.895647995722968*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"c0f70227-0b2b-4a9c-b936-b73d1f349d44"],

Cell[BoxData["SparseArray"], "Output",
 CellChangeTimes->{3.895647996122367*^9, 3.895715822270046*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"fdbea4da-44e1-45f4-9e1b-f95e9e46257b"],

Cell[BoxData[
 RowBox[{"{", "16777216", "}"}]], "Output",
 CellChangeTimes->{3.895647996122367*^9, 3.895715822272216*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"de69e22f-29bc-44e0-a606-7763244d5393"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"adjacencymatrix", "=", 
   RowBox[{"Partition", "[", 
    RowBox[{"aux2", ",", 
     SuperscriptBox["totaldimension", "2"]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8956480089698143`*^9, 3.895648011502693*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"d7c4747b-8b8e-4deb-80e3-121182bb6f2b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Head", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "%%"}]}], "Input",
 CellChangeTimes->{{3.895648050668878*^9, 3.8956480553838587`*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"334a5465-63ea-4516-b239-4452fff8d476"],

Cell[BoxData["SparseArray"], "Output",
 CellChangeTimes->{3.895648055768512*^9, 3.8957158291276293`*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"1e0cc562-2b18-472d-807f-e8353a930d6e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4096", ",", "4096"}], "}"}]], "Output",
 CellChangeTimes->{3.895648055768512*^9, 3.8957158291298723`*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"94fccce8-2459-4f0b-a1ef-66f43f214795"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aux3", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Sign", "[", 
    RowBox[{"adjacencymatrix", "+", 
     RowBox[{"Transpose", "[", "adjacencymatrix", "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[125]:=",ExpressionUUID->"102d646a-6769-4440-9c6e-815d8c62805a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["SparseArray", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  RasterBox[
                  SparseArray[
                   Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                   0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                  AspectRatio -> 1, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameLabel -> {None, None}, 
                  FrameTicks -> {{None, None}, {None, None}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26624", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4096", ",", "4096"}], "}"}], "SummaryItem"]}]}, {
                   
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  RasterBox[
                  SparseArray[
                   Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                   0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                  AspectRatio -> 1, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameLabel -> {None, None}, 
                  FrameTicks -> {{None, None}, {None, None}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26624", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4096", ",", "4096"}], "}"}], "SummaryItem"]}]}, {
                   
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.0015869140625`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "37"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "66"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "261"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[SparseArray, 2657072, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", SparseArray, 2657072, 
            8815382892510488164853636444948173490298556404098217240352, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "SparseArray[<26624>, {4096, 4096}, Sign[True]]"& )],
  False,
  BoxID -> 8815382892510488164853636444948173490298556404098217240352,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895648067045456*^9, 3.895715832506962*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"9e6cd04e-0b2b-4dac-8ded-df0bf6dddb64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Head", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "%%"}]}], "Input",
 CellChangeTimes->{{3.895648080677279*^9, 3.895648083089716*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"c02520bd-5e51-495a-99f2-e9216a41b96b"],

Cell[BoxData["SparseArray"], "Output",
 CellChangeTimes->{3.895648083373397*^9, 3.895715836998695*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"2c0d1a63-6641-4ac0-9fd8-9bdf33d6010a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4096", ",", "4096"}], "}"}]], "Output",
 CellChangeTimes->{3.895648083373397*^9, 3.895715837000972*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"9d4527b6-4f3c-48f5-8991-50b1cc5213a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphPlot", "[", 
  RowBox[{"aux3", ",", "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"i", "\[Rule]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"initialnodes", ",", 
           RowBox[{
            RowBox[{"Range", "[", 
             SuperscriptBox["totaldimension", "2"], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", "Red", ",", 
         "Black"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        SuperscriptBox["totaldimension", "2"]}], "}"}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Full Fock-Liouville space and intereactions for the ME\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", "\"\<Red dot is the initial state\>\"", "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.895648144552294*^9, 3.8956481581824017`*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"dbfb2ad2-c0fd-4ac4-a2cd-a227dc950970"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"GraphPlot", "[", 
          RowBox[{
           TagBox[
            TemplateBox[{
              RowBox[{
                StyleBox[
                 TagBox["SparseArray", "SummaryHead"], 
                 "NonInterpretableSummary"], 
                StyleBox["[", "NonInterpretableSummary"], 
                
                DynamicModuleBox[{
                 Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                 TemplateBox[{
                   TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[
                    RasterBox[
                    SparseArray[
                    Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                    0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameLabel -> {None, None}, 
                    FrameTicks -> {{None, None}, {None, None}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26624", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4096", ",", "4096"}], "}"}], "SummaryItem"]}]}, {
                    
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[
                    RasterBox[
                    SparseArray[
                    Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                    0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                    FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameLabel -> {None, None}, 
                    FrameTicks -> {{None, None}, {None, None}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26624", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4096", ",", "4096"}], "}"}], "SummaryItem"]}]}, {
                    
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.0015869140625`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "37"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "66"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "261"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], 
                   ButtonBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    
                    Or[$VersionNumber < 11.2, 
                    CurrentValue["RunningEvaluator"] =!= "Local"], 
                    Style[
                    "This object cannot be used as input.", "SummaryEmbed"], 
                    BoxForm`EmbedSummaryLabel[SparseArray, 2657072, 
                    Dynamic[Typeset`embedState$$], Automatic]], 
                    StandardForm]], ButtonFunction :> 
                    BoxForm`EmbedSummaryInterpretation[
                    "Choose", SparseArray, 2657072, 
                    8815382892510488164853636444948173490298556404098217240352\
, 
                    EvaluationBox[], 
                    Dynamic[Typeset`embedState$$], StandardForm, 
                    ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
                    "SummaryEmbedButton", ImageSize -> Inherited, 
                    BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
                    
                    And[$VersionNumber >= 11.2, 
                    CurrentValue["RunningEvaluator"] === "Local", 
                    Typeset`embedState$$ === "Ready"]], Appearance -> 
                    Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
                  "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
                StyleBox["]", "NonInterpretableSummary"]}]},
             "CopyTag",
             DisplayFunction->(#& ),
             
             InterpretationFunction->(
              "SparseArray[<26624>, {4096, 4096}, Sign[True]]"& )],
            False,
            BoxID -> 
            8815382892510488164853636444948173490298556404098217240352,
            Editable->False,
            SelectWithContents->True,
            Selectable->False], ",", 
           RowBox[{"VertexStyle", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"1", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"2", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"3", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"5", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"6", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"7", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"8", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"9", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"10", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"11", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"12", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"13", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"14", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"15", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              TemplateBox[{"4066"},
               "OutputSizeLimit`Skeleton"], ",", 
              RowBox[{"4082", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4083", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4084", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4085", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4086", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4087", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4088", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4089", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4090", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4091", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4092", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4093", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4094", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4095", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}], ",", 
              RowBox[{"4096", "\[Rule]", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{
                    {GrayLevel[0], RectangleBox[{0, 0}]}, 
                    {GrayLevel[0], RectangleBox[{1, -1}]}, 
                    {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
                   AspectRatio->1,
                   DefaultBaseStyle->"ColorSwatchGraphics",
                   Frame->True,
                   FrameStyle->GrayLevel[0.],
                   FrameTicks->None,
                   
                   ImageSize->
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}],
                   PlotRangePadding->None],
                  StyleBox[
                   RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                   False]],
                 Appearance->None,
                 BaseStyle->{},
                 BaselinePosition->Baseline,
                 ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]],
                 DefaultBaseStyle->{},
                 Evaluator->Automatic,
                 Method->"Preemptive"],
                GrayLevel[0],
                Editable->False,
                Selectable->False]}]}], "}"}]}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", 
            TemplateBox[{"56"},
             "OutputSizeLimit`Skeleton"]}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}], ",", 
           RowBox[{"FrameLabel", "\[Rule]", 
            RowBox[{"{", "\<\"Red dot is the initial state\"\>", "}"}]}]}], 
          "]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{107., {4., 15.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{93., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{93., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 128, 25906081976203788460, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{104., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{104., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 128, 25906081976203788460, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{77., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{77., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 128, 25906081976203788460, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{135., {1., 16.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[25906081976203788460 === $SessionID, 
   Out[128], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{{3.8956481463894653`*^9, 3.8956481594629307`*^9}, 
   3.89564823980357*^9, 3.8957158412360563`*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"3288d7b3-a79f-4b59-bbb8-936cdf8e5fcf"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rows\[ScriptCapitalL]", " ", "=", " ", 
   RowBox[{"Length", "@", "\[ScriptCapitalL]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cols\[ScriptCapitalL]", " ", "=", " ", 
   RowBox[{"Length", "@", 
    RowBox[{"\[ScriptCapitalL]", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8957176348373213`*^9, 3.8957176943254347`*^9}, {
  3.895717766009878*^9, 3.8957177665932207`*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"180749d3-5640-47d6-8f1d-61bde4a9cea8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrettyTiming", "[", 
  RowBox[{"\[ScriptCapitalL]test", " ", "=", " ", 
   RowBox[{"SparseArray", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[ScriptCapitalL]", "[", 
        RowBox[{"[", 
         RowBox[{"r", ",", "c"}], "]"}], "]"}], "/.", "par"}], ",", 
      RowBox[{"{", 
       RowBox[{"r", ",", "1", ",", "rows\[ScriptCapitalL]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"c", ",", "1", ",", "cols\[ScriptCapitalL]"}], "}"}]}], 
     "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895717710762034*^9, 3.895717721826809*^9}},
 CellLabel->
  "In[189]:=",ExpressionUUID->"b87a5d12-8c6b-4956-a2a1-26d91b9e0920"],

Cell[BoxData["\<\"0h : 0m : 27s\"\>"], "Print",
 CellChangeTimes->{3.895717779154937*^9},
 CellLabel->
  "During evaluation of \
In[189]:=",ExpressionUUID->"517bd6d6-db24-4a4c-920b-ea96d64c98f6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["SparseArray", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  RasterBox[
                  SparseArray[
                   Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                   0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                  AspectRatio -> 1, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameLabel -> {None, None}, 
                  FrameTicks -> {{None, None}, {None, None}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["18428", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4096", ",", "4096"}], "}"}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  RasterBox[
                  SparseArray[
                   Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                   0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                  AspectRatio -> 1, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameLabel -> {None, None}, 
                  FrameTicks -> {{None, None}, {None, None}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["18428", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4096", ",", "4096"}], "}"}], "SummaryItem"]}]}, {
                   
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.0010983943939208984`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", "0.8999999999999999`"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "37"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"-", "0.08035294183731445`"}], "+", 
                    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "66"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"0.005050000000000003`", "\[VeryThinSpace]"}], 
                    "+", 
                    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "261"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"0.005050000000000003`", "\[VeryThinSpace]"}], 
                    "+", 
                    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[SparseArray, 1361936, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", SparseArray, 1361936, 
            8815382892510488164853636444948173490317003148171948517448, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("SparseArray[<18428>, {4096, 4096}]"& )],
  False,
  BoxID -> 8815382892510488164853636444948173490317003148171948517448,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8957177149981728`*^9, 3.895717779186693*^9},
 CellLabel->
  "Out[189]=",ExpressionUUID->"e4da60cb-1804-41c3-b88e-b4751c71a2b5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"expState", "=", 
   RowBox[{"Sign", "[", 
    RowBox[{"Abs", "[", 
     RowBox[{
      RowBox[{"MatrixExp", "[", "\[ScriptCapitalL]test", "]"}], ".", 
      "istate"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.895648255841538*^9, 3.895648258128565*^9}, {
  3.895717835208089*^9, 3.895717835455668*^9}},
 CellLabel->
  "In[194]:=",ExpressionUUID->"4586039f-b6c4-42f7-82e2-2140de187fb4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Dimensions", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"Head", "@", "%%"}]}], "Input",
 CellChangeTimes->{{3.895648269541926*^9, 3.8956482761233397`*^9}},
 CellLabel->
  "In[195]:=",ExpressionUUID->"0fcb9294-4f3e-4668-939f-a512df764bfa"],

Cell[BoxData[
 RowBox[{"{", "4096", "}"}]], "Output",
 CellChangeTimes->{3.895717842582197*^9},
 CellLabel->
  "Out[195]=",ExpressionUUID->"8f3e23eb-9da6-4375-8738-c3e24898c23c"],

Cell[BoxData["List"], "Output",
 CellChangeTimes->{3.895717842585936*^9},
 CellLabel->
  "Out[196]=",ExpressionUUID->"7a366c13-e473-4478-b86a-5c2e4e9350ce"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"aux4", "=", 
   RowBox[{"expState", "*", 
    RowBox[{"Range", "[", 
     SuperscriptBox["totaldimension", "2"], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.895648290783345*^9, 3.8956482919233303`*^9}},
 CellLabel->
  "In[197]:=",ExpressionUUID->"d2540d56-b9a2-4d8a-a7b3-155198618f2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Let", "'"}], "s", " ", "now", " ", "look", " ", "at", " ", 
     "all", " ", "the", " ", "Fock"}], "-", 
    RowBox[{
    "Liouville", " ", "basis", " ", "vectors", " ", "that", " ", "were", " ", 
     "explored"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"nodeset", "=", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{"aux4", ",", "0"}], "]"}]}], ";"}]}]], "Input",
 CellLabel->
  "In[198]:=",ExpressionUUID->"153edb99-bfbc-4cc5-b5cd-a270ce2f96a3"],

Cell[CellGroupData[{

Cell[BoxData["nodeset"], "Input",
 CellChangeTimes->{{3.895717857924904*^9, 3.8957178932227697`*^9}},
 CellLabel->
  "In[201]:=",ExpressionUUID->"783663f7-6569-4eb1-b37d-b0e89e0ad597"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "5", ",", "9", ",", "33", ",", "37", ",", "41", ",", "45", ",", 
   "49", ",", "53", ",", "57", ",", "61", ",", "257", ",", "261", ",", "265", 
   ",", "289", ",", "293", ",", "297", ",", "301", ",", "305", ",", "309", 
   ",", "313", ",", "317", ",", "513", ",", "517", ",", "521", ",", "545", 
   ",", "549", ",", "553", ",", "557", ",", "561", ",", "565", ",", "569", 
   ",", "573", ",", "2049", ",", "2053", ",", "2057", ",", "2081", ",", 
   "2085", ",", "2089", ",", "2093", ",", "2097", ",", "2101", ",", "2105", 
   ",", "2109", ",", "2305", ",", "2309", ",", "2313", ",", "2337", ",", 
   "2341", ",", "2345", ",", "2349", ",", "2353", ",", "2357", ",", "2361", 
   ",", "2365", ",", "2561", ",", "2565", ",", "2569", ",", "2593", ",", 
   "2597", ",", "2601", ",", "2605", ",", "2609", ",", "2613", ",", "2617", 
   ",", "2621", ",", "2817", ",", "2821", ",", "2825", ",", "2849", ",", 
   "2853", ",", "2857", ",", "2861", ",", "2865", ",", "2869", ",", "2873", 
   ",", "2877", ",", "3073", ",", "3077", ",", "3081", ",", "3105", ",", 
   "3109", ",", "3113", ",", "3117", ",", "3121", ",", "3125", ",", "3129", 
   ",", "3133", ",", "3329", ",", "3333", ",", "3337", ",", "3361", ",", 
   "3365", ",", "3369", ",", "3373", ",", "3377", ",", "3381", ",", "3385", 
   ",", "3389", ",", "3585", ",", "3589", ",", "3593", ",", "3617", ",", 
   "3621", ",", "3625", ",", "3629", ",", "3633", ",", "3637", ",", "3641", 
   ",", "3645", ",", "3841", ",", "3845", ",", "3849", ",", "3873", ",", 
   "3877", ",", "3881", ",", "3885", ",", "3889", ",", "3893", ",", "3897", 
   ",", "3901"}], "}"}]], "Output",
 CellChangeTimes->{{3.895717859458468*^9, 3.895717893995459*^9}},
 CellLabel->
  "Out[201]=",ExpressionUUID->"2faa235a-de7a-4a08-8656-87a14c8199e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aux5", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Sign", "[", 
    RowBox[{"adjacencymatrix", "+", 
     RowBox[{"Transpose", "[", "adjacencymatrix", "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[202]:=",ExpressionUUID->"28b95031-b4e0-40d3-b627-a9414ccddcb2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["SparseArray", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  RasterBox[
                  SparseArray[
                   Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                   0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                  AspectRatio -> 1, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameLabel -> {None, None}, 
                  FrameTicks -> {{None, None}, {None, None}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26624", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4096", ",", "4096"}], "}"}], "SummaryItem"]}]}, {
                   
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  RasterBox[
                  SparseArray[
                   Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                   0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                  AspectRatio -> 1, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameLabel -> {None, None}, 
                  FrameTicks -> {{None, None}, {None, None}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["26624", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4096", ",", "4096"}], "}"}], "SummaryItem"]}]}, {
                   
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.0015869140625`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "37"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "66"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "261"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[SparseArray, 2657072, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", SparseArray, 2657072, 
            8815382892510488164853636444948173490335449892245665669296, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "SparseArray[<26624>, {4096, 4096}, Sign[True]]"& )],
  False,
  BoxID -> 8815382892510488164853636444948173490335449892245665669296,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8957179202394037`*^9},
 CellLabel->
  "Out[202]=",ExpressionUUID->"30420635-f57f-484f-bfdf-f5bfe49e2abd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Head", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "@", "%%"}]}], "Input",
 CellChangeTimes->{{3.895717932510363*^9, 3.895717951348178*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"3a311f27-f4d1-488b-b16d-fdf35c05ca4a"],

Cell[BoxData["SparseArray"], "Output",
 CellChangeTimes->{3.8957179518191423`*^9},
 CellLabel->
  "Out[203]=",ExpressionUUID->"d3c8de4b-9c3b-4057-81de-bb8c5ed2a0ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4096", ",", "4096"}], "}"}]], "Output",
 CellChangeTimes->{3.895717951821669*^9},
 CellLabel->
  "Out[204]=",ExpressionUUID->"b94e4a27-d701-47fe-8320-e14e625a6cf4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aux6", " ", "=", " ", 
  RowBox[{"aux5", "[", 
   RowBox[{"[", 
    RowBox[{"nodeset", ",", "nodeset"}], "]"}], "]"}]}]], "Input",
 CellLabel->
  "In[205]:=",ExpressionUUID->"3685a110-c114-4241-aed1-4bcd5bf3aa3e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJztyEEJACAURMEPpvBoEjsYQfBsZaOI6NEI82BhmdJnGyki8tv5t1XjG+ec
c84555xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84557cN1zW+rw==
              "], {{
              0, 0}, {25, 25}}, {0, 1}], AspectRatio -> 1, Axes -> False, 
             Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["495", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"121", ",", "121"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJztyEEJACAURMEPpvBoEjsYQfBsZaOI6NEI82BhmdJnGyki8tv5t1XjG+ec
c84555xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84557cN1zW+rw==
              "], {{
              0, 0}, {25, 25}}, {0, 1}], AspectRatio -> 1, Axes -> False, 
             Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["495", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"121", ",", "121"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.033809166040571`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "5"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "13"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "37"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[Automatic, {121, 121}, Sign[True], {1, {CompressedData["
1:eJwlzz0rBAAAgOGjbrpFUkopigySKCULGRhu0Q2K4fJRVyKXukFI0hluuYEM
lEQkH8MtlLrUlXykriSGG5BSJ4nBYFGe8tbzA97akXhksiQQCMwE/gsSoowK
qqihjgYaaaaVdrroJUyEAaIME2OcOAlmWSRJijQrrLLGBlvsss8hGU7IckaO
cy65Is89BZ4p8sU3P/xSajBIiHIqqaaeJlpoo4NOuukhTB8R+hkkyhCjxBhj
gjhTJJhmjnkWWCTJEinSLLPKOptss8MeBxyR4ZhTsuS44Job8txyxwMFHnni
hVeKvPHOB5/8AeCLQUk=
     "], CompressedData["
1:eJwlj3lXAWEYxWeUpLQJIZQKbcRYooxMO23aaI/RbmuXT91X6F6d8/7x3OU9
53fdauNI1QiC8CsKAp4gavs8fk1X/4Q30KGb9C10GgaD8IY8IZhGr9Sh84W7
TRG9eSbaY5mN9c4tomENxtmx+UMJtgLS0sDI6DIDRzDJwBmS4Uup4bGVbtN4
JK03u6NKjyW2yt4ae/HkOnsJecO+SXMLXnIbjpxxZfFtxzSe3jW7lT0NyQA2
NS1qPX5QQUtt1PDUtB5Ubah5ETNAwx3SEvthLomThgFxmKR0SLAnzUEKF63i
twGDwMM98kY/a21OMjEgFpOMEck/W4RwUWUPk0ZQtLJlY8W+yY8OSCeUK4s2
hmDH/tHFwfFl7uTw/BrnDe7b3MlpKa8Wymfw7mk+0L26e6J+pn6BLlZPS7W8
Wi+UkbwyeWPy2Pig/qT+gq40i9WfUq2l1pEwoP+OGyeu70qz+lNr/QGw+Gup

     "]}, {
    Sign[False], Sign[False], Sign[False + True], Sign[False + True], Sign[
     False], Sign[False], Sign[False], Sign[False + True], Sign[False + True],
      Sign[False + True], Sign[False], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False + True], Sign[False],
      Sign[False], Sign[False], Sign[False + True], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False], Sign[False + True],
      Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[False], 
     Sign[False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False], Sign[False + True],
      Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False + True], Sign[False],
      Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False], Sign[False], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False], Sign[False + True], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False], Sign[False + True],
      Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[False],
      Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False], Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False + True], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False], Sign[False + True],
      Sign[False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False], Sign[False + True], Sign[False + True], Sign[False], Sign[False],
      Sign[False + True], Sign[False], Sign[False + True], Sign[False + True],
      Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False], Sign[False + True], Sign[False + True], Sign[False], Sign[False],
      Sign[False], Sign[False + True], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False], Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False + True], Sign[
     False], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False + True], Sign[False],
      Sign[False], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False], Sign[False + True],
      Sign[False + True], Sign[False], Sign[False + True], Sign[False + True],
      Sign[False], Sign[False + True], Sign[False + True], Sign[False + True],
      Sign[False], Sign[False], Sign[False + True], Sign[False + True], Sign[
     False], Sign[False + True], Sign[False + True], Sign[False + True], Sign[
     False], Sign[False], Sign[False + True], Sign[False + True], Sign[False],
      Sign[False + True], Sign[False], Sign[False], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False], Sign[False + True], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[False],
      Sign[False + True], Sign[False], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False], Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[
     False], Sign[False], Sign[False + True], Sign[False], Sign[False], Sign[
     False], Sign[False + True], Sign[False], Sign[False], Sign[False], Sign[
     False], Sign[False], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[False],
      Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[False], 
     Sign[False + True], Sign[False], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[False],
      Sign[False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False + True], Sign[False],
      Sign[False], Sign[False + True], Sign[False + True], Sign[False + True],
      Sign[False], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False + True], Sign[False], Sign[
     False], Sign[False + True], Sign[False + True], Sign[False + True], Sign[
     False], Sign[False], Sign[False], Sign[False + True], Sign[False + True],
      Sign[False], Sign[False + True], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False + True], Sign[
     False], Sign[False], Sign[False + True], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False + True], Sign[False], Sign[False], Sign[False],
      Sign[False + True], Sign[False + True], Sign[False + True], Sign[False],
      Sign[False], Sign[False + True], Sign[False + True], Sign[False + True],
      Sign[False], Sign[False], Sign[False + True], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False], Sign[False + True],
      Sign[False + True], Sign[False], Sign[False + True], Sign[False + True],
      Sign[False], Sign[False + True], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False + True], Sign[
     False + True], Sign[False], Sign[False], Sign[False], Sign[False + True],
      Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[False], 
     Sign[False + True], Sign[False], Sign[False], Sign[False], Sign[
     False + True], Sign[False], Sign[False + True], Sign[False], Sign[
     False + True], Sign[False]}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8957179639596243`*^9},
 CellLabel->
  "Out[205]=",ExpressionUUID->"d3736f21-526e-4438-b12b-a6eee0066322"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aux66", " ", "=", " ", 
  RowBox[{"Normal", "@", "aux6"}]}]], "Input",
 CellChangeTimes->{{3.8957180193298893`*^9, 3.895718028275426*^9}},
 CellLabel->
  "In[207]:=",ExpressionUUID->"14f0f44a-4d36-4336-8f70-6419cd578795"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Sign", "[", "False", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "False", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             TemplateBox[{"100"},
              "OutputSizeLimit`Skeleton"], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}], ",", 
             RowBox[{"Sign", "[", "True", "]"}]}], "}"}], ",", 
           TemplateBox[{"120"},
            "OutputSizeLimit`Skeleton"]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{107., {4., 15.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{93., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 207, 25906081976203788460, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{104., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 207, 25906081976203788460, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{77., {1., 15.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 207, 25906081976203788460, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{135., {1., 16.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[25906081976203788460 === $SessionID, 
   Out[207], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.8957180286833572`*^9},
 CellLabel->
  "Out[207]=",ExpressionUUID->"44e9958b-27ee-49c5-9389-803429dc5bbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AdjacencyGraph", "[", 
  RowBox[{"aux6", ",", "\[IndentingNewLine]", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"i", "\[Rule]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"initialnodes", ",", 
           RowBox[{"nodeset", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", "Red", ",", 
         "Black"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "[", "nodeset", "]"}]}], "}"}]}], "]"}]}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Necessary Fock-Liouville subspace for the ME evolution\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", "\"\<Red dots are the initial state\>\"", "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.895718004752708*^9, 
  3.895718013886566*^9}},ExpressionUUID->"4ea383d0-b365-4185-b584-\
46ba9736d006"],

Cell[BoxData[
 TemplateBox[{
  "AdjacencyGraph", "inv", 
   "\"The argument \\!\\(\\*RowBox[{\\\"SparseArray\\\", \\\"[\\\", \
RowBox[{\\\"Automatic\\\", \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"3\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"]\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"AdjacencyGraph\\\", \\\"[\\\", \
RowBox[{\\\"Automatic\\\", \\\",\\\", RowBox[{\\\"SparseArray\\\", \\\"[\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\
\\\"}], \\\",\\\", RowBox[{\\\"VertexStyle\\\", \\\"\[Rule]\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"1\\\", \\\"\[Rule]\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"2\\\", \\\"\[Rule]\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"3\\\", \\\"\[Rule]\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"4\\\", \\\"\[Rule]\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"5\\\", \\\"\[Rule]\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"6\\\", \\\"\[Rule]\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"7\\\", \\\"\[Rule]\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"8\\\", \\\"\[Rule]\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"9\\\", \\\"\[Rule]\
\\\", InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[\
0], RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", RowBox[{\\\"10\\\", \
\\\"\[Rule]\\\", \
InterpretationBox[ButtonBox[TooltipBox[GraphicsBox[List[List[GrayLevel[0], \
RectangleBox[List[0, 0]]], List[GrayLevel[0], RectangleBox[List[1, -1]]], \
List[GrayLevel[0], RectangleBox[List[0, -1], List[2, 1]]]], \
Rule[DefaultBaseStyle, \\\"ColorSwatchGraphics\\\"], Rule[AspectRatio, 1], \
Rule[Frame, True], Rule[FrameStyle, GrayLevel[0.`]], Rule[FrameTicks, None], \
Rule[PlotRangePadding, None], Rule[ImageSize, Dynamic[List[Automatic, \
Times[1.35`, Times[CurrentValue[\\\"FontCapHeight\\\"], \
Power[AbsoluteCurrentValue[Magnification], -1]]]]]]], StyleBox[RowBox[List[\\\
\"GrayLevel\\\", \\\"[\\\", \\\"0\\\", \\\"]\\\"]], Rule[NumberMarks, \
False]]], Rule[Appearance, None], Rule[BaseStyle, List[]], \
Rule[BaselinePosition, Baseline], Rule[DefaultBaseStyle, List[]], \
RuleDelayed[ButtonFunction, With[List[Set[Typeset`box$, EvaluationBox[]]], \
If[Not[AbsoluteCurrentValue[\\\"Deployed\\\"]], \
CompoundExpression[SelectionMove[Typeset`box$, All, Expression], \
Set[FrontEnd`Private`$ColorSelectorInitialAlpha, 1], \
Set[FrontEnd`Private`$ColorSelectorInitialColor, GrayLevel[0]], \
Set[FrontEnd`Private`$ColorSelectorUseMakeBoxes, True], \
MathLink`CallFrontEnd[FrontEnd`AttachCell[Typeset`box$, \
FrontEndResource[\\\"GrayLevelColorValueSelector\\\"], List[0, List[Left, \
Bottom]], List[Left, Top], Rule[\\\"ClosingActions\\\", \
List[\\\"SelectionDeparture\\\", \\\"ParentChanged\\\", \
\\\"EvaluatorQuit\\\"]]]]]]]], Rule[BaseStyle, Inherited], Rule[Evaluator, \
Automatic], Rule[Method, \\\"Preemptive\\\"]], GrayLevel[0], Rule[Editable, \
False], Rule[Selectable, False]]}], \\\",\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"111\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"}\\\"}]}], \\\",\\\", RowBox[{\\\"PlotLabel\\\", \\\"\[Rule]\\\", \
\\\"\\\\\\\"Necessary Fock-Liouville subspace for the ME \
evolution\\\\\\\"\\\"}], \\\",\\\", RowBox[{\\\"Frame\\\", \\\"\[Rule]\\\", \
\\\"True\\\"}], \\\",\\\", RowBox[{\\\"FrameLabel\\\", \\\"\[Rule]\\\", \
RowBox[{\\\"{\\\", \\\"\\\\\\\"Red dots are the initial state\\\\\\\"\\\", \\\
\"}\\\"}]}]}], \\\"]\\\"}]\\) is not a valid \
\\!\\(\\*RowBox[{\\\"\\\\\\\"adjacency matrix\\\\\\\"\\\"}]\\).\"", 2, 206, 3,
    25906081976203788460, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.895717984998314*^9},
 CellLabel->
  "During evaluation of \
In[206]:=",ExpressionUUID->"b2cd9c7d-9576-440d-87d9-e42b63612490"],

Cell[BoxData[
 RowBox[{"AdjacencyGraph", "[", 
  RowBox[{"Automatic", ",", 
   InterpretationBox[
    RowBox[{
     TagBox["SparseArray",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJztyEEJACAURMEPpvBoEjsYQfBsZaOI6NEI82BhmdJnGyki8tv5t1XjG+ec
c84555xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84557cN1zW+rw==
                
                "], {{0, 0}, {25, 25}}, {0, 1}], AspectRatio -> 1, Axes -> 
               False, Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
               Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                   "\"Specified elements: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["495", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"121", ",", "121"}], "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJztyEEJACAURMEPpvBoEjsYQfBsZaOI6NEI82BhmdJnGyki8tv5t1XjG+ec
c84555xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84557cN1zW+rw==
                
                "], {{0, 0}, {25, 25}}, {0, 1}], AspectRatio -> 1, Axes -> 
               False, Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
               Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], 
               FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
               Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], 
               Method -> {
                "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                 Automatic, 
                 "DefaultGraphicsInteraction" -> {
                  "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                   "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                 "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                 Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
              GridBox[{{
                 RowBox[{
                   TagBox[
                   "\"Specified elements: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["495", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"121", ",", "121"}], "}"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Sign", "[", "True", "]"}], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["0.033809166040571`", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"\"", "SummaryItem"]}]}, {
                 TagBox[
                  TagBox[
                   GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "5"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", "False", "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "13"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "37"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Sign", "[", 
                    RowBox[{"False", "+", "True"}], "]"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    SparseArray[Automatic, {121, 121}, Sign[True], {1, {CompressedData["
1:eJwlzz0rBAAAgOGjbrpFUkopigySKCULGRhu0Q2K4fJRVyKXukFI0hluuYEM
lEQkH8MtlLrUlXykriSGG5BSJ4nBYFGe8tbzA97akXhksiQQCMwE/gsSoowK
qqihjgYaaaaVdrroJUyEAaIME2OcOAlmWSRJijQrrLLGBlvsss8hGU7IckaO
cy65Is89BZ4p8sU3P/xSajBIiHIqqaaeJlpoo4NOuukhTB8R+hkkyhCjxBhj
gjhTJJhmjnkWWCTJEinSLLPKOptss8MeBxyR4ZhTsuS44Job8txyxwMFHnni
hVeKvPHOB5/8AeCLQUk=
       "], CompressedData["
1:eJwlj3lXAWEYxWeUpLQJIZQKbcRYooxMO23aaI/RbmuXT91X6F6d8/7x3OU9
53fdauNI1QiC8CsKAp4gavs8fk1X/4Q30KGb9C10GgaD8IY8IZhGr9Sh84W7
TRG9eSbaY5mN9c4tomENxtmx+UMJtgLS0sDI6DIDRzDJwBmS4Uup4bGVbtN4
JK03u6NKjyW2yt4ae/HkOnsJecO+SXMLXnIbjpxxZfFtxzSe3jW7lT0NyQA2
NS1qPX5QQUtt1PDUtB5Ubah5ETNAwx3SEvthLomThgFxmKR0SLAnzUEKF63i
twGDwMM98kY/a21OMjEgFpOMEck/W4RwUWUPk0ZQtLJlY8W+yY8OSCeUK4s2
hmDH/tHFwfFl7uTw/BrnDe7b3MlpKa8Wymfw7mk+0L26e6J+pn6BLlZPS7W8
Wi+UkbwyeWPy2Pig/qT+gq40i9WfUq2l1pEwoP+OGyeu70qz+lNr/QGw+Gup

       "]}, {
      Sign[False], Sign[False], Sign[False + True], Sign[False + True], Sign[
       False], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False], Sign[False], Sign[False + True], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False + True], Sign[False], 
       Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[False],
        Sign[False + True], Sign[False], Sign[False], Sign[False + True], 
       Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False + True], 
       Sign[False], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False + True], Sign[False], 
       Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False + True], 
       Sign[False], Sign[False + True], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False + True], 
       Sign[False], Sign[False], Sign[False + True], Sign[False + True], Sign[
       False], Sign[False], Sign[False], Sign[False + True], Sign[False], 
       Sign[False], Sign[False + True], Sign[False], Sign[False + True], Sign[
       False], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False], Sign[False], Sign[False], Sign[False + True], Sign[False], 
       Sign[False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False + True], Sign[False + True], Sign[False + True], Sign[
       False], Sign[False], Sign[False + True], Sign[False + True], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False + True], 
       Sign[False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False + True], 
       Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False], Sign[False], Sign[False], Sign[False + True], Sign[False],
        Sign[False + True], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False + True], 
       Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False], Sign[False], Sign[False + True], Sign[False + True], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False + True], Sign[False], 
       Sign[False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False + True], Sign[False], 
       Sign[False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False], Sign[False], Sign[False], 
       Sign[False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False], Sign[False], Sign[False], Sign[False], Sign[False + True], 
       Sign[False], Sign[False], Sign[False], Sign[False + True], Sign[False],
        Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[
       False], Sign[False], Sign[False], Sign[False], Sign[False + True], 
       Sign[False], Sign[False], Sign[False + True], Sign[False], Sign[False],
        Sign[False + True], Sign[False], Sign[False], Sign[False], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False + True], 
       Sign[False], Sign[False], Sign[False + True], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False + True], Sign[False], 
       Sign[False], Sign[False + True], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False + True], 
       Sign[False], Sign[False], Sign[False + True], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False + True], Sign[False], 
       Sign[False], Sign[False + True], Sign[False + True], Sign[
       False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False + True], Sign[False + True], Sign[False], Sign[False + True], 
       Sign[False + True], Sign[False], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False], Sign[False + True], Sign[False + True], Sign[False], Sign[
       False], Sign[False], Sign[False + True], Sign[False], Sign[False], 
       Sign[False + True], Sign[False], Sign[False], Sign[False + True], Sign[
       False], Sign[False], Sign[False], Sign[False + True], Sign[False], 
       Sign[False + True], Sign[False], Sign[False + True], Sign[False]}}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{"VertexStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"2", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"3", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"4", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"5", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"6", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"7", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"8", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"9", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"10", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"11", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"12", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"13", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"14", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"15", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"16", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"17", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"18", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"19", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"20", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"21", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"22", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"23", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"24", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"25", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"26", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"27", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"28", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"29", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"30", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"31", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"32", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"33", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"34", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"35", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"36", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"37", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"38", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"39", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"40", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"41", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"42", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"43", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"44", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"45", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"46", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"47", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"48", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"49", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"50", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"51", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"52", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"53", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"54", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"55", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"56", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"57", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"58", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"59", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"60", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"61", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"62", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"63", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}},
                {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"64", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"65", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"66", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"67", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"68", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"69", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"70", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"71", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"72", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"73", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"74", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"75", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"76", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"77", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"78", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"79", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"80", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"81", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"82", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"83", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"84", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"85", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"86", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"87", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"88", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"89", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"90", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"91", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"92", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"93", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"94", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"95", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"96", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"97", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"98", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"99", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"100", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"101", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"102", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"103", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"104", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"105", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"106", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"107", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"108", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"109", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"110", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"111", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"112", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"113", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->GrayLevel[0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["GrayLevelColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        GrayLevel[0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"114", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"115", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"116", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"117", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"118", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"119", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"120", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}], ",", 
      RowBox[{"121", "\[Rule]", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> False]],
         
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[1, 0, 0],
        Editable->False,
        Selectable->False]}]}], "}"}]}], ",", 
   RowBox[{
   "PlotLabel", 
    "\[Rule]", "\<\"Necessary Fock-Liouville subspace for the ME \
evolution\"\>"}], ",", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", "\<\"Red dots are the initial state\"\>", "}"}]}]}], 
  "]"}]], "Output",
 CellChangeTimes->{3.8957179850927896`*^9},
 CellLabel->
  "Out[206]=",ExpressionUUID->"cbcde24a-ee9e-4673-a691-ce25b366989e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Some important insights", "Section",
 CellChangeTimes->{{3.895716809878022*^9, 
  3.8957168152109537`*^9}},ExpressionUUID->"e4219534-9d61-4b4c-a89e-\
57738f3027fa"],

Cell["\<\
I was having a lot of trouble to make the Fock-Liouville space exploration \
with my code. The difference between mine and Stephen\[CloseCurlyQuote]s is \
that instead of lists I use Sparse arrays, which are much more convenient to \
spead up computations. But there is a crucial problem: Sparse arrays do not \
work with substitution of values as lists. To understand what I mean check \
below:\
\>", "Text",
 CellChangeTimes->{{3.895716820227675*^9, 
  3.895716923028475*^9}},ExpressionUUID->"7e359294-760f-4f9e-98b9-\
8c1d42b37a26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"test", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"z", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "l", ",", "m"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.895716550752623*^9, 3.895716577997262*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"a13de996-3773-4a45-8e9a-88b043000f69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"z", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "l", ",", "m"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8957165791235933`*^9, 3.8957166039391193`*^9}},
 CellLabel->
  "Out[154]=",ExpressionUUID->"56c898e2-8bc5-4835-ac67-d5aefcddce3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testsparse", " ", "=", " ", 
  RowBox[{"SparseArray", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"z", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "l", ",", "m"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8957165889998827`*^9, 3.895716599720991*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"d0914eab-5cc5-417f-bf7c-6c418f70ef5f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.5, 0., 0.}, {0.5, 0., 0.}, {0.5, 0., 0.}}, {{0.5, 
              0., 0.}, {0.5, 0., 0.}, {0.5, 0., 0.}}}, {{0, 0}, {3, 2}}, {0, 
              1}], AspectRatio -> 1, Axes -> False, Frame -> False, 
             FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.5, 0., 0.}, {0.5, 0., 0.}, {0.5, 0., 0.}}, {{0.5, 
              0., 0.}, {0.5, 0., 0.}, {0.5, 0., 0.}}}, {{0, 0}, {3, 2}}, {0, 
              1}], AspectRatio -> 1, Axes -> False, Frame -> False, 
             FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "z", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "b", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "c", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "k", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[
  Automatic, {2, 3}, 0, {
   1, {{0, 3, 6}, {{1}, {2}, {3}, {1}, {2}, {
     3}}}, {$CellContext`z, $CellContext`b, $CellContext`c, $CellContext`k, \
$CellContext`l, $CellContext`m}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.895716600306327*^9, 3.8957166066336946`*^9}},
 CellLabel->
  "Out[155]=",ExpressionUUID->"388e2720-3cde-454e-a1e7-cd4264b1d9bf"]
}, Open  ]],

Cell["\<\
Now if I want to substitute the values of z and l for instance, I do:\
\>", "Text",
 CellChangeTimes->{{3.895716934885743*^9, 
  3.895716951861444*^9}},ExpressionUUID->"f6dc0015-4983-43d7-8c5a-\
fcb86af3a95d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partest", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"z", "->", "8"}], ",", 
    RowBox[{"l", "->", "9"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.895717241829049*^9, 3.8957172583856497`*^9}},
 CellLabel->
  "In[162]:=",ExpressionUUID->"3acb1711-cb61-428e-a4f6-49455caf4ac9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"z", "\[Rule]", "8"}], ",", 
   RowBox[{"l", "\[Rule]", "9"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8957172595147047`*^9},
 CellLabel->
  "Out[162]=",ExpressionUUID->"1e435870-2511-46dc-b406-4b4d6ed9194a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"test", "/.", "partest"}], "//", "mf"}]], "Input",
 CellChangeTimes->{{3.895716613176175*^9, 3.89571662240028*^9}, {
   3.895716959669314*^9, 3.895716960265744*^9}, 3.8957172659483232`*^9},
 CellLabel->
  "In[163]:=",ExpressionUUID->"00a62abf-c02a-4a41-a16a-342e7beb062f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"8", "b", "c"},
     {"k", "9", "m"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Print",
 CellChangeTimes->{3.8957169605446463`*^9, 3.895717267378234*^9},
 CellLabel->
  "During evaluation of \
In[163]:=",ExpressionUUID->"d64a775c-4f9d-4ace-90c0-26fd901131d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"8", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "9", ",", "m"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.895716623000163*^9, 3.895716960547265*^9, 
  3.895717267380844*^9},
 CellLabel->
  "Out[163]=",ExpressionUUID->"e8e8e3e8-9b51-4539-8038-b89bd6e74b86"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", "test"}]], "Input",
 CellChangeTimes->{{3.895716703939937*^9, 3.8957167089557247`*^9}},
 CellLabel->
  "In[160]:=",ExpressionUUID->"c57274ea-9141-4bd0-b20f-4fcb0500ad19"],

Cell[BoxData["List"], "Output",
 CellChangeTimes->{{3.895716706272538*^9, 3.895716709290145*^9}},
 CellLabel->
  "Out[160]=",ExpressionUUID->"5db3c5da-5f95-4ff7-80c5-a6a67a9cb0c4"]
}, Open  ]],

Cell["\<\
If I try the same to the sparse array it doesn\[CloseCurlyQuote]t work! The \
questions is: How to substitute the values of the variables in a \
SparseArray????\
\>", "Text",
 CellChangeTimes->{{3.895716969073791*^9, 
  3.895717007469089*^9}},ExpressionUUID->"7b115901-6db5-40a1-a227-\
028acad3097a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"testsparse", "/.", 
    RowBox[{"z", "->", "8"}]}], "/.", 
   RowBox[{"l", "->", "9"}]}], "//", "mf"}]], "Input",
 CellChangeTimes->{{3.895716631287694*^9, 3.895716635753912*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"c97bfe41-d2f5-45dd-ad2b-92b6fbceda2c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"z", "b", "c"},
     {"k", "l", "m"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {2, 3}, 0, {
     1, {{0, 3, 6}, {{1}, {2}, {3}, {1}, {2}, {
       3}}}, {$CellContext`z, $CellContext`b, $CellContext`c, $CellContext`k, \
$CellContext`l, $CellContext`m}}]]]]], "Print",
 CellChangeTimes->{3.895716636061564*^9, 3.895717275975766*^9},
 CellLabel->
  "During evaluation of \
In[164]:=",ExpressionUUID->"bb8c2a35-7fa6-41da-9cf7-5ef7420f883b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.5, 0., 0.}, {0.5, 0., 0.}, {0.5, 0., 0.}}, {{0.5, 
              0., 0.}, {0.5, 0., 0.}, {0.5, 0., 0.}}}, {{0, 0}, {3, 2}}, {0, 
              1}], AspectRatio -> 1, Axes -> False, Frame -> False, 
             FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.5, 0., 0.}, {0.5, 0., 0.}, {0.5, 0., 0.}}, {{0.5, 
              0., 0.}, {0.5, 0., 0.}, {0.5, 0., 0.}}}, {{0, 0}, {3, 2}}, {0, 
              1}], AspectRatio -> 1, Axes -> False, Frame -> False, 
             FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "z", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "b", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "c", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "k", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[
  Automatic, {2, 3}, 0, {
   1, {{0, 3, 6}, {{1}, {2}, {3}, {1}, {2}, {
     3}}}, {$CellContext`z, $CellContext`b, $CellContext`c, $CellContext`k, \
$CellContext`l, $CellContext`m}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8957166327619762`*^9, 3.895716636065851*^9}, 
   3.8957172760022297`*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"d3c6c11c-d0f9-4822-9632-acb2cb170283"]
}, Open  ]],

Cell["Brute force way to make the substitution:", "Text",
 CellChangeTimes->{{3.8957175016625013`*^9, 
  3.895717512856351*^9}},ExpressionUUID->"11f75646-1613-4ccd-a47d-\
fc6ea00e9549"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"rowstest", " ", "=", " ", 
   RowBox[{"Length", "@", "testsparse"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"colstest", " ", "=", " ", 
   RowBox[{"Length", "@", 
    RowBox[{"testsparse", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"substest", " ", "=", " ", 
  RowBox[{"SparseArray", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"testsparse", "[", 
       RowBox[{"[", 
        RowBox[{"r", ",", "u"}], "]"}], "]"}], "/.", "partest"}], ",", 
     RowBox[{"{", 
      RowBox[{"r", ",", "1", ",", "rowstest"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"u", ",", "1", ",", "colstest"}], "}"}]}], "]"}]}]}]}], "Input",\

 CellChangeTimes->{{3.895717279584572*^9, 3.895717302992724*^9}, {
  3.895717379636484*^9, 3.895717396982451*^9}, {3.895717433447441*^9, 
  3.8957174806603403`*^9}, {3.895717551318914*^9, 3.895717553660295*^9}},
 CellLabel->
  "In[175]:=",ExpressionUUID->"4cb79e58-7b23-4d16-b240-20532e5e9fee"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.5, 0., 0.}, {0.772061, 0.92462, 0.998703}, {0.5, 
              0., 0.}}, {{0.47277788888888883`, 0.7640493333333334, 
              0.9830457222222222}, {0.5, 0., 0.}, {0.5, 0., 0.}}}, {{0, 0}, {
              3, 2}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
             False, FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.5, 0., 0.}, {0.772061, 0.92462, 0.998703}, {0.5, 
              0., 0.}}, {{0.47277788888888883`, 0.7640493333333334, 
              0.9830457222222222}, {0.5, 0., 0.}, {0.5, 0., 0.}}}, {{0, 0}, {
              3, 2}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
             False, FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "8", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "b", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "c", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "k", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[
  Automatic, {2, 3}, 0, {
   1, {{0, 3, 6}, {{1}, {2}, {3}, {1}, {2}, {3}}}, {
    8, $CellContext`b, $CellContext`c, $CellContext`k, 9, $CellContext`m}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8957174810555983`*^9, 3.895717553963175*^9},
 CellLabel->
  "Out[177]=",ExpressionUUID->"00ef56ed-0d4e-4330-9d88-e99a0d20dba6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"substest", "//", "mf"}]], "Input",
 CellChangeTimes->{{3.895717557464387*^9, 3.8957175617117863`*^9}},
 CellLabel->
  "In[178]:=",ExpressionUUID->"5eccd49c-26a1-470c-8aa6-1273a8fdf2b5"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"8", "b", "c"},
     {"k", "9", "m"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {2, 3}, 0, {
     1, {{0, 3, 6}, {{1}, {2}, {3}, {1}, {2}, {3}}}, {
      8, $CellContext`b, $CellContext`c, $CellContext`k, 
       9, $CellContext`m}}]]]]], "Print",
 CellChangeTimes->{3.89571756198472*^9},
 CellLabel->
  "During evaluation of \
In[178]:=",ExpressionUUID->"25976d17-9477-4587-be1e-cedd84fb61c5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.5, 0., 0.}, {0.772061, 0.92462, 0.998703}, {0.5, 
              0., 0.}}, {{0.47277788888888883`, 0.7640493333333334, 
              0.9830457222222222}, {0.5, 0., 0.}, {0.5, 0., 0.}}}, {{0, 0}, {
              3, 2}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
             False, FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{{0.5, 0., 0.}, {0.772061, 0.92462, 0.998703}, {0.5, 
              0., 0.}}, {{0.47277788888888883`, 0.7640493333333334, 
              0.9830457222222222}, {0.5, 0., 0.}, {0.5, 0., 0.}}}, {{0, 0}, {
              3, 2}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
             False, FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1.`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "8", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "b", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "c", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "k", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[
  Automatic, {2, 3}, 0, {
   1, {{0, 3, 6}, {{1}, {2}, {3}, {1}, {2}, {3}}}, {
    8, $CellContext`b, $CellContext`c, $CellContext`k, 9, $CellContext`m}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895717561989482*^9},
 CellLabel->
  "Out[178]=",ExpressionUUID->"9c76e44f-485a-4945-91e0-5cddca178c90"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"substest", "//", "Head"}]], "Input",
 CellChangeTimes->{{3.895717517741164*^9, 3.8957175248377953`*^9}},
 CellLabel->
  "In[174]:=",ExpressionUUID->"fa53425f-3c58-4eba-8900-0d44a91612ff"],

Cell[BoxData["List"], "Output",
 CellChangeTimes->{3.895717525150185*^9},
 CellLabel->
  "Out[174]=",ExpressionUUID->"5bf66f52-e756-4ee4-8e53-8da7f9a37c06"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.895717340679822*^9, 
  3.895717378075358*^9}},ExpressionUUID->"d962f298-9e1c-4bdf-b4c0-\
22f9029e9617"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testsparse", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.895717415566785*^9, 3.89571742096622*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"a4789424-013f-4370-ae3f-7dabcee482ff"],

Cell[BoxData["b"], "Output",
 CellChangeTimes->{
  3.895717313127288*^9, {3.895717346102469*^9, 3.895717368040473*^9}, {
   3.895717416583477*^9, 3.895717421176227*^9}},
 CellLabel->
  "Out[170]=",ExpressionUUID->"351ed435-e5ac-4533-b49d-72e66af3efe2"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{Automatic, 76}, {-22, Automatic}},
TaggingRules->Association["TryRealOnly" -> False],
Magnification:>2. Inherited,
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"97ff13c3-dcdc-4b07-a6f3-e3de7772f3f0"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 160, 3, 134, "Section",ExpressionUUID->"96664244-946d-41b2-bbfd-22577d48b967"],
Cell[CellGroupData[{
Cell[765, 29, 13342, 339, 2508, "Input",ExpressionUUID->"87ed7f14-6861-44a5-aca1-d358fa68f528",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[14132, 372, 1187, 29, 141, "Print",ExpressionUUID->"0d8db76b-ad20-4823-9f5d-79ba3ab3ed93"],
Cell[15322, 403, 1187, 29, 141, "Print",ExpressionUUID->"26c6ae53-7a36-4656-ac61-327a6edd147e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16570, 439, 204, 4, 134, "Section",ExpressionUUID->"c2564edb-378c-4601-9de6-67cc5daf883f"],
Cell[16777, 445, 1389, 34, 347, "Input",ExpressionUUID->"088a8be7-7df3-45fd-aaf8-f5da85661798"],
Cell[18169, 481, 1910, 52, 231, "Input",ExpressionUUID->"695fd1db-3359-424d-9c14-4b4d67b7c249"],
Cell[20082, 535, 1469, 49, 252, "Input",ExpressionUUID->"50c8e7e8-2681-4265-84b5-c12c5f73655a"],
Cell[21554, 586, 2484, 58, 347, "Input",ExpressionUUID->"3adbd642-da89-47ce-bf23-3f0851d09499"],
Cell[CellGroupData[{
Cell[24063, 648, 3595, 80, 511, "Input",ExpressionUUID->"00f11c30-c5d2-47d0-907e-e24159ae6916"],
Cell[27661, 730, 440, 8, 47, "Print",ExpressionUUID->"3e91b74a-397e-43c2-a4e5-88eea2ec6a23"]
}, Open  ]],
Cell[28116, 741, 458, 9, 59, "Input",ExpressionUUID->"8c127d8f-97c8-49fd-a4b7-9cd0aad79765"],
Cell[CellGroupData[{
Cell[28599, 754, 343, 5, 101, "Input",ExpressionUUID->"56aa1b0e-7316-484f-94bf-3208ed783d3b"],
Cell[28945, 761, 351, 7, 89, "Output",ExpressionUUID->"55a9d9b2-c44d-4582-a868-d095e3d2469f"],
Cell[29299, 770, 312, 5, 89, "Output",ExpressionUUID->"44cc63a8-d255-41c2-b4b7-2805df3d4b74"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29648, 780, 221, 3, 59, "Input",ExpressionUUID->"3f489501-b643-4a2a-8609-55cd18b117d2"],
Cell[29872, 785, 3681, 67, 735, "Output",ExpressionUUID->"65a0f924-10f3-43e9-bf6e-5b85bd42aa6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33590, 857, 179, 3, 107, "Subsection",ExpressionUUID->"7bb08fb0-8917-4eeb-bfab-3aa1ed8197bb"],
Cell[33772, 862, 239, 3, 101, "Text",ExpressionUUID->"048e9049-af8f-4d3f-8e60-f7fda25ae38b"],
Cell[34014, 867, 2008, 44, 214, "Input",ExpressionUUID->"a1548c1a-5a3f-43e1-9066-118122f4f0bc"],
Cell[CellGroupData[{
Cell[36047, 915, 1195, 33, 183, "Input",ExpressionUUID->"fc5b8126-6d0c-4492-a586-632cef101d5c"],
Cell[CellGroupData[{
Cell[37267, 952, 762, 25, 141, "Print",ExpressionUUID->"bb9a2be8-592d-4c85-af99-893aa4a55bba"],
Cell[38032, 979, 770, 23, 141, "Print",ExpressionUUID->"a156f1d7-2bef-4466-80b4-c472360a9f95"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[38851, 1008, 584, 15, 81, "Input",ExpressionUUID->"62371075-389b-4350-8f06-1f05fa6b61d7"],
Cell[39438, 1025, 949, 15, 131, "Output",ExpressionUUID->"04a6258f-179e-4553-a5af-c82bf451963e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40424, 1045, 319, 7, 81, "Input",ExpressionUUID->"64bf8ff5-5753-402d-a86f-1b306a465324"],
Cell[40746, 1054, 43348, 552, 3288, "Output",ExpressionUUID->"79836c3c-825b-4fa9-9061-d284af7bf2c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84131, 1611, 558, 13, 81, "Input",ExpressionUUID->"aa0c8ade-dcb1-4b58-b835-fdffd2440a0f"],
Cell[84692, 1626, 948, 15, 131, "Output",ExpressionUUID->"22891ac3-847b-4144-8f68-9e589695520b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85677, 1646, 235, 5, 81, "Input",ExpressionUUID->"942e17ef-62e3-4f31-bcab-56352526c19a"],
Cell[85915, 1653, 43347, 552, 3288, "Output",ExpressionUUID->"9224f215-306e-4c31-82e5-2e654668c605"]
}, Open  ]],
Cell[129277, 2208, 727, 19, 123, "Input",ExpressionUUID->"0c6887f8-2f71-4a9d-a974-0aedea3eccf4"],
Cell[130007, 2229, 1336, 29, 169, "Input",ExpressionUUID->"ee5e25bc-e96e-4b30-893e-680fa9ad33fa"],
Cell[131346, 2260, 489, 13, 81, "Input",ExpressionUUID->"43090796-e4d5-4fb3-9959-44b8b708f8d9"],
Cell[CellGroupData[{
Cell[131860, 2277, 189, 3, 81, "Input",ExpressionUUID->"10140ab9-771b-4707-a0b3-d71ce46435d4"],
Cell[132052, 2282, 1081, 17, 172, "Output",ExpressionUUID->"a70a53ee-7d51-4fc7-ab67-6304d71701be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133170, 2304, 265, 5, 123, "Input",ExpressionUUID->"9ab660b7-ec2d-4a5b-bc9a-6419c803967d"],
Cell[133438, 2311, 178, 3, 89, "Output",ExpressionUUID->"c7a3baa1-c641-4080-a196-d1401dab5ad2"],
Cell[133619, 2316, 200, 4, 89, "Output",ExpressionUUID->"d90cb2d6-90b6-4641-ade0-26e2f39b73a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133856, 2325, 362, 10, 81, "Input",ExpressionUUID->"d17711a9-9427-4480-b560-c2c20dd71353"],
Cell[134221, 2337, 209277, 3020, 167, "Output",ExpressionUUID->"32861cdd-1998-4258-8040-fc7d0e755adb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[343535, 5362, 233, 5, 81, "Input",ExpressionUUID->"8a7ceab3-bd05-45d4-b3f0-56501b9caed9"],
Cell[343771, 5369, 182, 3, 89, "Output",ExpressionUUID->"6928201e-646e-411b-a381-cf93fd6fdaa5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[343990, 5377, 781, 19, 123, "Input",ExpressionUUID->"b874e5de-ad8c-493c-adbe-150430558bd2"],
Cell[344774, 5398, 209380, 3022, 167, "Output",ExpressionUUID->"f25143ce-2452-4811-93f8-f1c665130112"]
}, Open  ]],
Cell[CellGroupData[{
Cell[554191, 8425, 263, 5, 123, "Input",ExpressionUUID->"c0f70227-0b2b-4a9c-b936-b73d1f349d44"],
Cell[554457, 8432, 185, 3, 89, "Output",ExpressionUUID->"fdbea4da-44e1-45f4-9e1b-f95e9e46257b"],
Cell[554645, 8437, 204, 4, 89, "Output",ExpressionUUID->"de69e22f-29bc-44e0-a606-7763244d5393"]
}, Open  ]],
Cell[554864, 8444, 337, 8, 87, "Input",ExpressionUUID->"d7c4747b-8b8e-4deb-80e3-121182bb6f2b"],
Cell[CellGroupData[{
Cell[555226, 8456, 265, 5, 123, "Input",ExpressionUUID->"334a5465-63ea-4516-b239-4452fff8d476"],
Cell[555494, 8463, 187, 3, 89, "Output",ExpressionUUID->"1e0cc562-2b18-472d-807f-e8353a930d6e"],
Cell[555684, 8468, 228, 5, 89, "Output",ExpressionUUID->"94fccce8-2459-4f0b-a1ef-66f43f214795"]
}, Open  ]],
Cell[CellGroupData[{
Cell[555949, 8478, 299, 8, 81, "Input",ExpressionUUID->"102d646a-6769-4440-9c6e-815d8c62805a"],
Cell[556251, 8488, 11568, 239, 207, "Output",ExpressionUUID->"9e6cd04e-0b2b-4dac-8ded-df0bf6dddb64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[567856, 8732, 263, 5, 123, "Input",ExpressionUUID->"c02520bd-5e51-495a-99f2-e9216a41b96b"],
Cell[568122, 8739, 185, 3, 89, "Output",ExpressionUUID->"2c0d1a63-6641-4ac0-9fd8-9bdf33d6010a"],
Cell[568310, 8744, 226, 5, 89, "Output",ExpressionUUID->"9d4527b6-4f3c-48f5-8991-50b1cc5213a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568573, 8754, 1179, 30, 262, "Input",ExpressionUUID->"dbfb2ad2-c0fd-4ac4-a2cd-a227dc950970"],
Cell[569755, 8786, 86053, 1920, 465, "Output",ExpressionUUID->"3288d7b3-a79f-4b59-bbb8-936cdf8e5fcf"]
}, Open  ]],
Cell[655823, 10709, 550, 13, 123, "Input",ExpressionUUID->"180749d3-5640-47d6-8f1d-61bde4a9cea8"],
Cell[CellGroupData[{
Cell[656398, 10726, 685, 17, 81, "Input",ExpressionUUID->"b87a5d12-8c6b-4956-a2a1-26d91b9e0920"],
Cell[657086, 10745, 195, 4, 47, "Print",ExpressionUUID->"517bd6d6-db24-4a4c-920b-ea96d64c98f6"],
Cell[657284, 10751, 11521, 237, 182, "Output",ExpressionUUID->"e4da60cb-1804-41c3-b88e-b4751c71a2b5"]
}, Open  ]],
Cell[668820, 10991, 434, 11, 81, "Input",ExpressionUUID->"4586039f-b6c4-42f7-82e2-2140de187fb4"],
Cell[CellGroupData[{
Cell[669279, 11006, 265, 5, 123, "Input",ExpressionUUID->"0fcb9294-4f3e-4668-939f-a512df764bfa"],
Cell[669547, 11013, 178, 4, 89, "Output",ExpressionUUID->"8f3e23eb-9da6-4375-8738-c3e24898c23c"],
Cell[669728, 11019, 156, 3, 89, "Output",ExpressionUUID->"7a366c13-e473-4478-b86a-5c2e4e9350ce"]
}, Open  ]],
Cell[669899, 11025, 326, 8, 87, "Input",ExpressionUUID->"d2540d56-b9a2-4d8a-a7b3-155198618f2f"],
Cell[670228, 11035, 555, 15, 123, "Input",ExpressionUUID->"153edb99-bfbc-4cc5-b5cd-a270ce2f96a3"],
Cell[CellGroupData[{
Cell[670808, 11054, 184, 3, 81, "Input",ExpressionUUID->"783663f7-6569-4eb1-b37d-b0e89e0ad597"],
Cell[670995, 11059, 1815, 27, 254, "Output",ExpressionUUID->"2faa235a-de7a-4a08-8656-87a14c8199e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[672847, 11091, 299, 8, 81, "Input",ExpressionUUID->"28b95031-b4e0-40d3-b627-a9414ccddcb2"],
Cell[673149, 11101, 11548, 239, 207, "Output",ExpressionUUID->"30420635-f57f-484f-bfdf-f5bfe49e2abd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[684734, 11345, 263, 5, 123, "Input",ExpressionUUID->"3a311f27-f4d1-488b-b16d-fdf35c05ca4a"],
Cell[685000, 11352, 165, 3, 89, "Output",ExpressionUUID->"d3c8de4b-9c3b-4057-81de-bb8c5ed2a0ec"],
Cell[685168, 11357, 204, 5, 89, "Output",ExpressionUUID->"b94e4a27-d701-47fe-8320-e14e625a6cf4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[685409, 11367, 237, 6, 81, "Input",ExpressionUUID->"3685a110-c114-4241-aed1-4bcd5bf3aa3e"],
Cell[685649, 11375, 20146, 354, 167, "Output",ExpressionUUID->"d3736f21-526e-4438-b12b-a6eee0066322"]
}, Open  ]],
Cell[CellGroupData[{
Cell[705832, 11734, 245, 5, 81, "Input",ExpressionUUID->"14f0f44a-4d36-4336-8f70-6419cd578795"],
Cell[706080, 11741, 10055, 254, 274, "Output",ExpressionUUID->"44e9958b-27ee-49c5-9389-803429dc5bbc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[716172, 12000, 1052, 27, 224, "Input",ExpressionUUID->"4ea383d0-b365-4185-b584-46ba9736d006"],
Cell[717227, 12029, 17803, 265, 89, "Message",ExpressionUUID->"b2cd9c7d-9576-440d-87d9-e42b63612490"],
Cell[735033, 12296, 239042, 5948, 519, "Output",ExpressionUUID->"cbcde24a-ee9e-4673-a691-ce25b366989e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[974136, 18251, 170, 3, 134, "Section",ExpressionUUID->"e4219534-9d61-4b4c-a89e-57738f3027fa"],
Cell[974309, 18256, 545, 10, 114, "Text",ExpressionUUID->"7e359294-760f-4f9e-98b9-8c1d42b37a26"],
Cell[CellGroupData[{
Cell[974879, 18270, 380, 10, 81, "Input",ExpressionUUID->"a13de996-3773-4a45-8e9a-88b043000f69"],
Cell[975262, 18282, 344, 9, 89, "Output",ExpressionUUID->"56c898e2-8bc5-4835-ac67-d5aefcddce3a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[975643, 18296, 432, 11, 81, "Input",ExpressionUUID->"d0914eab-5cc5-417f-bf7c-6c418f70ef5f"],
Cell[976078, 18309, 9914, 209, 142, "Output",ExpressionUUID->"388e2720-3cde-454e-a1e7-cd4264b1d9bf"]
}, Open  ]],
Cell[986007, 18521, 219, 5, 69, "Text",ExpressionUUID->"f6dc0015-4983-43d7-8c5a-fcb86af3a95d"],
Cell[CellGroupData[{
Cell[986251, 18530, 315, 8, 81, "Input",ExpressionUUID->"3acb1711-cb61-428e-a4f6-49455caf4ac9"],
Cell[986569, 18540, 260, 7, 89, "Output",ExpressionUUID->"1e435870-2511-46dc-b406-4b4d6ed9194a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[986866, 18552, 306, 6, 81, "Input",ExpressionUUID->"00a62abf-c02a-4a41-a16a-342e7beb062f"],
Cell[987175, 18560, 663, 19, 75, "Print",ExpressionUUID->"d64a775c-4f9d-4ace-90c0-26fd901131d7"],
Cell[987841, 18581, 363, 10, 89, "Output",ExpressionUUID->"e8e8e3e8-9b51-4539-8038-b89bd6e74b86"]
}, Open  ]],
Cell[CellGroupData[{
Cell[988241, 18596, 206, 4, 81, "Input",ExpressionUUID->"c57274ea-9141-4bd0-b20f-4fcb0500ad19"],
Cell[988450, 18602, 180, 3, 89, "Output",ExpressionUUID->"5db3c5da-5f95-4ff7-80c5-a6a67a9cb0c4"]
}, Open  ]],
Cell[988645, 18608, 310, 7, 69, "Text",ExpressionUUID->"7b115901-6db5-40a1-a227-028acad3097a"],
Cell[CellGroupData[{
Cell[988980, 18619, 309, 8, 81, "Input",ExpressionUUID->"c97bfe41-d2f5-45dd-ad2b-92b6fbceda2c"],
Cell[989292, 18629, 857, 24, 75, "Print",ExpressionUUID->"bb8c2a35-7fa6-41da-9cf7-5ef7420f883b"],
Cell[990152, 18655, 9942, 210, 142, "Output",ExpressionUUID->"d3c6c11c-d0f9-4822-9632-acb2cb170283"]
}, Open  ]],
Cell[1000109, 18868, 185, 3, 69, "Text",ExpressionUUID->"11f75646-1613-4ccd-a47d-fc6ea00e9549"],
Cell[CellGroupData[{
Cell[1000319, 18875, 1039, 26, 164, "Input",ExpressionUUID->"4cb79e58-7b23-4d16-b240-20532e5e9fee"],
Cell[1001361, 18903, 10043, 210, 142, "Output",ExpressionUUID->"00ef56ed-0d4e-4330-9d88-e99a0d20dba6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1011441, 19118, 209, 4, 81, "Input",ExpressionUUID->"5eccd49c-26a1-470c-8aa6-1273a8fdf2b5"],
Cell[1011653, 19124, 813, 24, 75, "Print",ExpressionUUID->"25976d17-9477-4587-be1e-cedd84fb61c5"],
Cell[1012469, 19150, 10019, 210, 142, "Output",ExpressionUUID->"9c76e44f-485a-4945-91e0-5cddca178c90"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1022525, 19365, 211, 4, 81, "Input",ExpressionUUID->"fa53425f-3c58-4eba-8900-0d44a91612ff"],
Cell[1022739, 19371, 156, 3, 89, "Output",ExpressionUUID->"5bf66f52-e756-4ee4-8e53-8da7f9a37c06"]
}, Open  ]],
Cell[1022910, 19377, 152, 3, 59, "Input",ExpressionUUID->"d962f298-9e1c-4bdf-b4c0-22f9029e9617"],
Cell[CellGroupData[{
Cell[1023087, 19384, 258, 6, 81, "Input",ExpressionUUID->"a4789424-013f-4370-ae3f-7dabcee482ff"],
Cell[1023348, 19392, 252, 5, 89, "Output",ExpressionUUID->"351ed435-e5ac-4533-b49d-72e66af3efe2"]
}, Open  ]]
}, Open  ]]
}
]
*)

